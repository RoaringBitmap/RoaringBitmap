/*
 * (c) the authors Licensed under the Apache License, Version 2.0.
 */

package org.roaringbitmap.buffer;


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.Test;
import org.roaringbitmap.IntConsumer;
import org.roaringbitmap.IntIterator;
import org.roaringbitmap.PeekableIntIterator;
import org.roaringbitmap.RoaringBitmap;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.ShortBuffer;
import java.util.*;

/**
 * Generic testing of the roaring bitmaps
 */
@SuppressWarnings({"static-method"})
public class TestRoaringBitmap {
	
  @Test
  public void testMultipleAdd() {
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    bitmap.add(1);
    bitmap.add(1, 2, 3);
    bitmap.add(0xFFFFFFFF);
    bitmap.add(0xFFFFFFFE,0xFFFFFFFF );
    Assert.assertEquals("{1,2,3,4294967294,4294967295}",bitmap.toString());   
  }
    
  @Test 
  public void binaryTest() throws IOException {
    System.out.println("[binaryTest]");
    Random rand = new Random();
    rand.setSeed(11111);
    for(int z = 0; z < 1000; ++z) {
    System.out.println("[binaryTest] "+z);
      final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
      for(int k = 0; k < 100; k++)
        rr1.add((rand.nextInt() & 0xFFFF) << 16);
      final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
      for(int k = 0; k < 100; k++)
        rr2.add((rand.nextInt() & 0xFFFF) << 16);
      ByteArrayOutputStream bos1 = new ByteArrayOutputStream();
      DataOutputStream dos1 = new DataOutputStream(bos1);
      rr1.serialize(dos1);
      dos1.close();
      ByteBuffer bb1 = ByteBuffer.wrap(bos1.toByteArray());
      final ImmutableRoaringBitmap rrback1 = new ImmutableRoaringBitmap(bb1);
      ByteArrayOutputStream bos2 = new ByteArrayOutputStream();
      DataOutputStream dos2 = new DataOutputStream(bos2);
      rr2.serialize(dos2);
      dos2.close();
      ByteBuffer bb2 = ByteBuffer.wrap(bos2.toByteArray());
      final ImmutableRoaringBitmap rrback2 = new ImmutableRoaringBitmap(bb2);
      Assert.assertEquals(ImmutableRoaringBitmap.and(rrback1, rrback2), 
          MutableRoaringBitmap.and(rr1, rr2));
      Assert.assertEquals(ImmutableRoaringBitmap.and(rrback2, rrback1), 
          MutableRoaringBitmap.and(rr2, rr1));
      Assert.assertEquals(ImmutableRoaringBitmap.andNot(rrback1, rrback2), 
          MutableRoaringBitmap.andNot(rr1, rr2));
      Assert.assertEquals(ImmutableRoaringBitmap.andNot(rrback2, rrback1), 
          MutableRoaringBitmap.andNot(rr2, rr1));
      Assert.assertEquals(ImmutableRoaringBitmap.xor(rrback1, rrback2), 
          MutableRoaringBitmap.xor(rr1, rr2));
      Assert.assertEquals(ImmutableRoaringBitmap.xor(rrback2, rrback1), 
          MutableRoaringBitmap.xor(rr2, rr1));
      Assert.assertEquals(ImmutableRoaringBitmap.or(rrback1, rrback2), 
          MutableRoaringBitmap.or(rr1, rr2));
      Assert.assertEquals(ImmutableRoaringBitmap.or(rrback2, rrback1), 
          MutableRoaringBitmap.or(rr2, rr1));      
    }
  }

	@Test
	public void testStringer() {
	    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
	    bitmap.add(1);
	    bitmap.add(2);
	    bitmap.add(3);
	    bitmap.add(0xFFFFFFFF);
	    Assert.assertEquals("{1,2,3,4294967295}",bitmap.toString());		
	}
	
	@Test
	public  void report128() {
	    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
        bitmap.add(59798854);
        bitmap.add(91274955);
        bitmap.add(97569495);
        bitmap.add(101993170);
        PeekableIntIterator it = bitmap.getIntIterator();
        it.advanceIfNeeded(100620278);
        Assert.assertTrue(it.hasNext());
        Assert.assertEquals(101993170, it.next());
        Assert.assertFalse(it.hasNext());
	}
	
	@Test
	public  void report128_fly() {
	    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
        bitmap.add(59798854);
        bitmap.add(91274955);
        bitmap.add(97569495);
        bitmap.add(101993170);
        BufferIntIteratorFlyweight it = new BufferIntIteratorFlyweight();
        it.wrap(bitmap);
        it.advanceIfNeeded(100620278);
        Assert.assertTrue(it.hasNext());
        Assert.assertEquals(101993170, it.next());
        Assert.assertFalse(it.hasNext());
	}
	@Test
	public  void limitBug2() {
		class MyConsumer implements IntConsumer {
			public int count = 0;
			@Override public void accept(int value) { count++; }
		}

		MutableRoaringBitmap r = new MutableRoaringBitmap();
		int count = 0;
		for (int i = 0; i < 500; i++) {
			for (int j = 0; j < 9943; j++) {
				if (i % 2 == 0) r.add(count); count++;
			}
		}
		MutableRoaringBitmap limited = r.limit(1000000);
		Assert.assertEquals(1000000,limited.getCardinality());
		MyConsumer c = new MyConsumer();
		limited.forEach(c);
		Assert.assertEquals(1000000,c.count);
		Assert.assertEquals(1000000,limited.toArray().length);

	}
  
  @Test
  public void limitTest() {
    MutableRoaringBitmap r = new MutableRoaringBitmap();
    r.add(0l, 10000000l);
    System.out.println(r.getCardinality());
    Assert.assertEquals(1,r.limit(1).getCardinality());
    Assert.assertEquals(10,r.limit(10).getCardinality());
    Assert.assertEquals(100,r.limit(100).getCardinality());
    Assert.assertEquals(1000,r.limit(1000).getCardinality());
    Assert.assertEquals(10000,r.limit(10000).getCardinality());
    Assert.assertEquals(100000,r.limit(100000).getCardinality());
    Assert.assertEquals(1000000,r.limit(1000000).getCardinality());
  }
  
  @Test
  public void pointerContainerTest() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < (1 << 16); i+=2) {
      rb.add(i);
    }
    for (int i = (1 << 16); i < 2*((1 << 16)); i+= 512) {
      rb.add(i);
    }
    for (int i = 2*(1 << 16); i < 3*((1 << 16)); i++) {
      rb.add(i);
    }    
    rb.runOptimize();
    MappeableContainerPointer cp = rb.getContainerPointer();
    MappeableContainerPointer cpo =  (MappeableContainerPointer) cp.clone();
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertNotEquals(cpo.getContainer(), null);

    Assert.assertEquals(cp.compareTo(cpo),0);
    
    Assert.assertEquals(cp.getCardinality(), (1<<16)/2);
    Assert.assertTrue(cp.isBitmapContainer());
    Assert.assertFalse(cp.isRunContainer());

    cp.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertEquals(cp.getCardinality(), (1<<16)/512);
    Assert.assertFalse(cp.isBitmapContainer());
    Assert.assertFalse(cp.isRunContainer());

    cp.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertEquals(cp.getCardinality(), (1<<16));
    Assert.assertFalse(cp.isBitmapContainer());
    Assert.assertTrue(cp.isRunContainer());

    cpo.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    cpo.advance();
    Assert.assertTrue(cp.compareTo(cpo)==0);

    cp.advance();

    Assert.assertEquals(cp.getContainer(), null);
    
  }
  @Test
  public void pointerImmutableContainerTest() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < (1 << 16); i+=2) {
      rb.add(i);
    }
    for (int i = (1 << 16); i < 2*((1 << 16)); i+= 512) {
      rb.add(i);
    }
    for (int i = 2*(1 << 16); i < 3*((1 << 16)); i++) {
      rb.add(i);
    }    
    rb.runOptimize();
    ImmutableRoaringBitmap irb =toMapped(rb);
    MappeableContainerPointer cp = irb.getContainerPointer();
    MappeableContainerPointer cpo =  (MappeableContainerPointer) cp.clone();
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertNotEquals(cpo.getContainer(), null);

    Assert.assertEquals(cp.compareTo(cpo),0);
    
    Assert.assertEquals(cp.getCardinality(), (1<<16)/2);
    Assert.assertTrue(cp.isBitmapContainer());
    Assert.assertFalse(cp.isRunContainer());

    cp.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertEquals(cp.getCardinality(), (1<<16)/512);
    Assert.assertFalse(cp.isBitmapContainer());
    Assert.assertFalse(cp.isRunContainer());

    cp.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    Assert.assertNotEquals(cp.getContainer(), null);
    Assert.assertEquals(cp.getCardinality(), (1<<16));
    Assert.assertFalse(cp.isBitmapContainer());
    Assert.assertTrue(cp.isRunContainer());

    cpo.advance();
    Assert.assertTrue(cp.compareTo(cpo)>0);
    cpo.advance();
    Assert.assertTrue(cp.compareTo(cpo)==0);

    cp.advance();

    Assert.assertEquals(cp.getContainer(), null);
    
  }
  
  private static ImmutableRoaringBitmap toMapped(MutableRoaringBitmap r) {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    try {
      r.serialize(dos);
      dos.close();
    } catch (IOException e) {
      throw new RuntimeException(e.toString());
    }
    ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray());
    return new ImmutableRoaringBitmap(bb);
  }


  @Test
  public void conversionTest() {
    RoaringBitmap rb = new RoaringBitmap();
    for (int i = 0; i < 100; i++) {
      rb.add(i);
    }
    for (int i = 0; i < 100; i++) {
      rb.add(i * 2 + (1 << 16));
    }
    for (int i = 0; i < (1 << 16); i++) {
      rb.add(i * 2 + 2 * (1 << 16));
    }
    rb.runOptimize();
    MutableRoaringBitmap mrb = rb.toMutableRoaringBitmap();
    RoaringBitmap rb2 = mrb.toRoaringBitmap();
    Assert.assertEquals(rb, rb2);
    ImmutableRoaringBitmap irb = toMapped(mrb);
    Assert.assertEquals(irb.toRoaringBitmap(), rb2);
    
  }

   @Test
  public void testFlipBigInts() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < 1 << 20; ++i) {
        rb.flip((1<<31)+i);
      assertEquals(rb.getCardinality(), i + 1);
    }
    for (int i = (1 << 20) - 1; i >= 0; --i) {
        rb.flip((1<<31)+i);
      assertEquals(rb.getCardinality(), i);
    }
  }




  @Test
  public void testFlipOnEmpty() {
    MutableRoaringBitmap r1 = new MutableRoaringBitmap();
    r1.flip(0L, 10L);
    Assert.assertTrue(r1.getCardinality() == 10);
  }

  @Test
  public void emptySerialization() throws IOException {
    MutableRoaringBitmap rr1 = MutableRoaringBitmap.bitmapOf();
    MutableRoaringBitmap rr2 = MutableRoaringBitmap.bitmapOf();
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    // could call "rr1.runOptimize()" and "rr2.runOptimize" if there
    // there were runs to compress
    rr1.serialize(dos);
    rr2.serialize(dos);
    dos.close();
    ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray());
    ImmutableRoaringBitmap rrback1 = new ImmutableRoaringBitmap(bb);
    bb.position(bb.position() + rrback1.serializedSizeInBytes());
    new ImmutableRoaringBitmap(bb);
  }

  @Test
  public void containerSharingWithXor() {
    MutableRoaringBitmap r1 = new MutableRoaringBitmap();
    r1.flip(131000L, 131001L);
    MutableRoaringBitmap r2 = new MutableRoaringBitmap();
    r2.add(220000);
    MutableRoaringBitmap r3 = new MutableRoaringBitmap();
    int killingPosition = 66000;
    r3.add(killingPosition);
    Assert.assertFalse(r1.contains(killingPosition));
    r2.xor(r1);
    Assert.assertTrue(r2.contains(131000));
    Assert.assertFalse(r1.contains(killingPosition));
    r2.or(r3);
    Assert.assertTrue(r2.contains(131000));
    Assert.assertTrue(r2.contains(killingPosition));
    Assert.assertFalse(r1.contains(killingPosition));
  }

  @Test
  public void testAstesana() {
    MutableRoaringBitmap r1 = new MutableRoaringBitmap();
    // Strange thing: Replace this line by r1.add(131000) and the bug vanishes!
    r1.flip(131000L, 131001L);
    MutableRoaringBitmap r2 = new MutableRoaringBitmap();
    r2.add(220000);
    MutableRoaringBitmap r3 = new MutableRoaringBitmap();
    int killingPosition = 66000;
    r3.add(killingPosition);
    Assert.assertFalse(r1.contains(killingPosition)); // ok
    r2.or(r1);
    Assert.assertFalse(r1.contains(killingPosition)); // ok
    r2.or(r3);
    Assert.assertFalse(r1.contains(killingPosition)); // ko
  }

  @Test
  public void testOr001() {
    int[] array1 = {22871, 22873, 22876, 22880, 22886, 22889, 22893, 22897, 22901, 22905, 22910,
        22915, 22919, 22927, 22934, 22940, 24750, 38579, 48470, 50533, 53256, 53717, 53752, 53802,
        53938, 54727, 54865, 55202, 55815, 55822, 55940, 56711, 56977, 57122, 59933, 60037, 60402,
        60520, 60853, 61163, 61340, 61549, 61632, 62097, 62373, 62961, 62993, 63031, 63075, 64209,
        64644, 64762, 64893, 64927, 64997, 65117, 65128, 65173, 65201, 65472, 65536, 65622, 66092,
        66162, 66302, 66381, 66551, 103979, 104644, 106866, 117285, 123372, 127548, 132167, 132168,
        136283, 136433, 137661, 138019, 138239, 138380, 138816, 138916, 138933, 139414, 140342,
        140914, 142751, 142994, 143895, 145081, 147331, 147686, 148021, 148375, 148587, 149114,
        149734, 152696, 153608, 154741, 154932, 155263, 157121, 158947, 159444, 161102, 161383,
        162735, 164298, 168043, 169398, 169536, 170419, 170846, 171153, 177016, 177471, 178305,
        178673, 183731, 183936, 184083, 184106, 185663, 188371, 189495, 189531, 196189, 198419,
        198758, 198796, 200645, 201137, 216865, 216936, 217770, 217810, 217836, 217909, 218569,
        218700, 218931, 219363, 220009, 225925, 234706, 241183, 241561, 242140, 242281, 245018,
        245056, 249935, 250442, 250615, 251696, 252825, 254178, 256788, 256906, 257289, 258833,
        260432, 260563, 260930, 262684, 262834, 263128, 265919, 268662, 269542, 270217, 271673,
        273776, 274560, 275649, 305458, 306241, 306550, 307580, 310891, 312701, 313514, 318134,
        319185, 320757, 321280, 322046, 322743, 323211, 324667, 325382, 326450, 327159, 328836,
        329075, 331179, 332836, 332997, 333071, 333205, 333488, 333595, 335045, 335803, 336417,
        336610, 338487, 339827, 339992, 346123, 348858, 351257, 351957, 353896, 354559, 357142,
        358253, 366662, 378768, 391984, 392282, 415077, 429446, 429449, 429452, 429453, 429476,
        429480, 429486, 429492, 429497, 429501, 429504, 429505, 429510, 429515, 429519, 429524,
        429530, 429533, 429541, 429546, 429553, 429554, 429564, 429572, 429577, 429579, 429586,
        429589, 429596, 429604, 429606, 429612, 429615, 429616, 429624, 429632, 429639, 429642,
        429646, 429651, 429656, 429664, 429670, 429674, 429678, 429681, 429686, 429695, 429701,
        429706, 429717, 429721, 429725, 429733, 429736, 429739, 429743, 429748, 429754, 429761,
        429767, 429772, 429780, 429791, 429792, 429793, 429794, 429795, 429817, 429822, 429823,
        429831, 429836, 429842, 429849, 429855, 429859, 429863, 429866, 429873, 429876, 429882,
        429885, 429900, 429903, 429913, 429921, 429923, 429927, 429932, 429939, 429947, 429950,
        429955, 429964, 429968, 429974, 429982, 429987, 429993, 429999, 430003, 430011, 430015,
        430023, 430028, 430033, 430039, 430044, 430048, 430053, 430057, 430059, 430063, 430068,
        430073, 430077, 430082, 430086, 430093, 430098, 430101, 430114, 430120, 430126, 430131,
        430135, 430139, 430144, 430149, 430155, 430157, 430167, 430175, 430181, 430186, 430194,
        430195, 430196, 430214, 430223, 430228, 430236, 430253, 430258, 430263, 430269, 430277,
        430284, 430288, 430293, 430297, 430303, 430309, 430316, 430321, 430332, 430338, 430343,
        430346, 430348, 430355, 430358, 430369, 430375, 430384, 430391, 430397, 430410, 430415,
        430420, 430424, 430430, 430435, 430437, 430445, 430449, 430461, 430467, 430473, 430482,
        430486, 430490, 430496, 430500, 430506, 430511, 430515, 430535, 430539, 430550, 430568,
        430575, 430581, 430588, 430591, 430596, 430605, 430612, 430617, 430625, 430629, 430633,
        430638, 430643, 430649, 430656, 430663, 430666, 430672, 430679, 430684, 430692, 430696,
        430700, 430707, 430716, 430723, 430728, 430733, 430745, 430751, 430755, 430759, 430767,
        430770, 430782, 430787, 430791, 430804, 430810, 430814, 430821, 430825, 430829, 430833,
        430838, 430844, 430849, 430852, 430859, 430864, 430867, 430870, 430877, 430881, 430887,
        430891, 430896, 430901, 430907, 430912, 430917, 430923, 430927, 430932, 430936, 430944,
        430947, 430953, 430959, 430967, 430971, 430979, 430985, 430989, 430993, 430997, 431003,
        431006, 431015, 431021, 431022, 431033, 431039, 431046, 431050, 431054, 431059, 431065,
        431069, 431074, 431081, 431085, 431092, 431097, 431104, 431110, 431120, 431125, 431133,
        431138, 431142, 431147, 431157, 431164, 431171, 431175, 431180, 431186, 431190, 431195,
        431207, 431213, 431218, 431220, 431224, 431228, 431233, 431235, 431240, 431245, 431251,
        431259, 431264, 431271, 431272, 431280, 431287, 431294, 431299, 431307, 431315, 431319,
        431324, 431330, 431334, 431339, 431345, 431352, 431356, 431363, 431375, 431379, 431383,
        431388, 431393, 431398, 431405, 431409, 431416, 431422, 431426, 431433, 431438, 431444,
        431451, 431455, 431464, 431469, 431472, 431477, 431483, 431490, 431496, 431506, 431513,
        431516, 431521, 431526, 431534, 431536, 431545, 431550, 431559, 431564, 431571, 431573,
        431579, 431584, 431587, 431592, 431604, 431614, 431624, 431629, 431634, 431638, 431645,
        431651, 431659, 431663, 431674, 431678, 431684, 431692, 431696, 431700, 431706, 431712,
        431719, 431723, 431729, 431736, 431741, 431747, 431755, 431758, 431762, 431767, 431777,
        431782, 431787, 431791, 431796, 431799, 431805, 431809, 431814, 431819, 431823, 431828,
        431832, 431838, 431842, 431849, 431853, 431858, 431862, 431866, 431869, 431874, 431881,
        431887, 431894, 431900, 431906, 431912, 431917, 431925, 431931, 431936, 431943, 431948,
        431956, 431958, 431964, 431971, 431976, 431981, 431988, 431994, 431998, 432008, 432012,
        432024, 432029, 432033, 432038, 432045, 432048, 432058, 432062, 432066, 432070, 432076,
        432077, 432087, 432093, 432098, 432104, 432114, 432123, 432128, 432133, 432139, 432145,
        432151, 432161, 432168, 432177, 432181, 432188, 432189, 432203, 432209, 432216, 432222,
        432227, 432232, 432242, 432247, 432256, 432259, 432264, 432269, 432271, 432277, 432286,
        432294, 432297, 432302, 432308, 432313, 432319, 432326, 432331, 432337, 432345, 432349,
        432353, 432356, 432361, 432366, 432370, 432378, 432384, 432390, 432391, 432397, 432400,
        432403, 432408, 432413, 432419, 432422, 432427, 432433, 432440, 432443, 432450, 432455,
        432460, 432466, 432467, 432481, 432489, 432493, 432498, 432504, 432511, 432513, 432517,
        432525, 432531, 432537, 432544, 432546, 432555, 432561, 432565, 432569, 432574, 432579,
        432586, 432590, 432597, 432605, 432611, 432619, 432626, 432630, 432637, 432644, 432646,
        432653, 432654, 432664, 432670, 432674, 432679, 432682, 432687, 432694, 432706, 432711,
        432714, 432721, 432726, 432732, 432741, 432747, 432753, 432755, 432761, 432764, 432768,
        432774, 432779, 432784, 432792, 432798, 432801, 432808, 432815, 432823, 432825, 432833,
        432838, 432842, 432847, 432853, 432861, 432866, 432873, 432879, 432889, 432895, 432901,
        432906, 432913, 432917, 432920, 432926, 432935, 432940, 432949, 432953, 432958, 432960,
        432966, 432967, 432968, 432969, 432970, 432971, 432972, 432996, 432999, 433004, 433010,
        433020, 433026, 433029, 433033, 433042, 433045, 433050, 433054, 433058, 433062, 433065,
        433070, 433076, 433086, 433095, 433101, 433102, 433116, 433122, 433129, 433132, 433140,
        433146, 433151, 433157, 433163, 433169, 433176, 433181, 433188, 433198, 433204, 433219,
        433229, 433236, 433240, 433246, 433250, 433259, 433263, 433274, 433277, 433282, 433286,
        433291, 433295, 433299, 433306, 433316, 433318, 433322, 433327, 433335, 433342, 433348,
        433351, 433359, 433362, 433367, 433371, 433377, 433384, 433393, 433398, 433403, 433407,
        433411, 433425, 433430, 433437, 433441, 433445, 433452, 433453, 433458, 433462, 433469,
        433473, 433478, 433484, 433490, 433495, 433501, 433506, 433514, 433517, 433521, 433527,
        433534, 433544, 433549, 433552, 433561, 433565, 433569, 433576, 433585, 433589, 433594,
        433597, 433600, 433603, 433606, 433613, 433619, 433623, 433627, 433639, 433643, 433648,
        433654, 433658, 433665, 433673, 433678, 433681, 433689, 433696, 433704, 433709, 433716,
        433721, 433725, 433729, 433734, 433738, 433744, 433749, 433755, 433760, 433766, 433771,
        433776, 433781, 433785, 433790, 433798, 433803, 433810, 433814, 433817, 433822, 433828,
        433833, 433837, 433843, 433849, 433852, 433858, 433863, 433871, 433875, 433881, 433883,
        433884, 433897, 433903, 433909, 433913, 433921, 433926, 433932, 433936, 433942, 433946,
        433951, 433959, 433965, 433976, 433981, 433989, 433996, 434004, 434011, 434013, 434019,
        434023, 434029, 434036, 434041, 434048, 434050, 434056, 434060, 434068, 434074, 434079,
        434085, 434091, 434096, 434100, 434105, 434110, 434119, 434123, 434129, 434133, 434139,
        434146, 434150, 434156, 434161, 434168, 434173, 434183, 434188, 434193, 434200, 434208,
        434213, 434219, 434223, 434229, 434235, 434241, 434247, 434258, 434262, 434269, 434275,
        434282, 434287, 434291, 434296, 434303, 434308, 434313, 434316, 434323, 434327, 434335,
        434342, 434349, 434353, 434360, 434366, 434372, 434373, 434381, 434387, 434392, 434397,
        434401, 434403, 434409, 434414, 434420, 434427, 434433, 434440, 434445, 434449, 434454,
        434460, 434467, 434473, 434479, 434481, 434490, 434494, 434501, 434505, 434510, 434517,
        434526, 434537, 434542, 434548, 434553, 434558, 434563, 434569, 434574, 434580, 434586,
        434588, 434595, 434603, 434606, 434617, 434620, 434626, 434630, 434638, 434644, 434647,
        434651, 434658, 434666, 434671, 434679, 434681, 434685, 434692, 434699, 434703, 434708,
        434713, 434720, 434723, 434729, 434734, 434738, 434742, 434746, 434753, 434762, 434766,
        434773, 434781, 434790, 434799, 434805, 434810, 434814, 434823, 434831, 434839, 434845,
        434850, 434856, 434859, 434863, 434869, 434870, 434882, 434890, 434896, 434899, 434906,
        434912, 434917, 434921, 434930, 434935, 434940, 434945, 434949, 434956, 434961, 434967,
        434977, 434982, 434987, 434992, 434995, 435002, 435005, 435009, 435016, 435021, 435025,
        435028, 435034, 435041, 435050, 435055, 435065, 435069, 435075, 435078, 435083, 435091,
        435097, 435102, 435105, 435107, 435113, 435118, 435124, 435131, 435141, 435144, 435150,
        435154, 435159, 435167, 435171, 435177, 435181, 435187, 435192, 435198, 435204, 435211,
        435212, 435221, 435228, 435231, 435237, 435244, 435246, 435254, 435258, 435264, 435275,
        435283, 435289, 435301, 435304, 435312, 435318, 435323, 435329, 435334, 435340, 435343,
        435347, 435351, 435358, 435363, 435368, 435375, 435382, 435388, 435391, 435396, 435399,
        435405, 435412, 435416, 435422, 435425, 435429, 435437, 435444, 435447, 435453, 435458,
        435470, 435477, 435486, 435491, 435497, 435500, 435511, 435516, 435520, 435526, 435533,
        435539, 435545, 435551, 435559, 435564, 435569, 435575, 435579, 435585, 435590, 435597,
        435599, 435600, 435610, 435616, 435618, 435623, 435628, 435636, 435643, 435649, 435654,
        435659, 435663, 435671, 435675, 435678, 435683, 435689, 435702, 435705, 435712, 435718,
        435749, 435755, 435759, 435764, 435771, 435775, 435780, 435785, 435791, 435794, 435802,
        435811, 435816, 435822, 435828, 435833, 435838, 435844, 435851, 435859, 435861, 435866,
        435869, 435876, 435882, 435890, 435897, 435900, 435908, 435913, 435923, 435929, 435934,
        435937, 435942, 435945, 435951, 435953, 435959, 435965, 435969, 435975, 435982, 435987,
        435992, 436000, 436008, 436013, 436017, 436022, 436027, 436033, 436038, 436043, 436048,
        436052, 436062, 436065, 436069, 436073, 436079, 436088, 436092, 436100, 436106, 436116,
        436123, 436127, 436133, 436139, 436147, 436153, 436159, 436165, 436172, 436179, 436184,
        436190, 436194, 436199, 436206, 436210, 436211, 436217, 436223, 436229, 436234, 436240,
        436245, 436253, 436258, 436262, 436268, 436273, 436282, 436287, 436294, 436303, 436306,
        436313, 436316, 436321, 436329, 436337, 436341, 436349, 436353, 436358, 436365, 436368,
        436373, 436378, 436387, 436391, 436396, 436401, 436408, 436412, 436420, 436423, 436428,
        436435, 436441, 436447, 436451, 436461, 436463, 436467, 436471, 436477, 436479, 436485,
        436489, 436494, 436502, 436509, 436512, 436518, 436529, 436538, 436543, 436552, 436553,
        436560, 436564, 436569, 436575, 436580, 436585, 436591, 436597, 436603, 436605, 436610,
        436616, 436619, 436628, 436633, 436637, 436640, 436644, 436649, 436653, 436659, 436666,
        436674, 436681, 436687, 436694, 436700, 436703, 436710, 436720, 436723, 436730, 436735,
        436742, 436748, 436756, 436761, 436766, 436772, 436778, 436783, 436787, 436792, 436799,
        436808, 436810, 436812, 436817, 436823, 436832, 436838, 436845, 436849, 436853, 436859,
        436865, 436872, 436878, 436882, 436885, 436891, 436898, 436903, 436910, 436911, 436922,
        436928, 436932, 436939, 436942, 436948, 436950, 436956, 436963, 436968, 436975, 436984,
        436988, 436994, 437003, 437009, 437013, 437020, 437023, 437028, 437033, 437043, 437053,
        437058, 437063, 437073, 437076, 437079, 437089, 437093, 437095, 437101, 437111, 437119,
        437121, 437127, 437135, 437140, 437147, 437151, 437155, 437160, 437165, 437171, 437173,
        437180, 437186, 437194, 437199, 437205, 437213, 437217, 437223, 437227, 437231, 437243,
        437250, 437256, 437261, 437267, 437271, 437277, 437284, 437289, 437295, 437300, 437304,
        437312, 437322, 437326, 437333, 437338, 437354, 437357, 437362, 437366, 437370, 437374,
        437380, 437386, 437391, 437395, 437399, 437404, 437412, 437416, 437419, 437427, 437432,
        437433, 437451, 437456, 437461, 437467, 437468, 437477, 437485, 437492, 437495, 437501,
        437502, 437506, 437513, 437524, 437526, 437539, 437544, 437552, 437558, 437562, 437568,
        437573, 437578, 437587, 437592, 437596, 437600, 437605, 437610, 437619, 437625, 437630,
        437631, 437639, 437647, 437648, 437655, 437661, 437667, 437672, 437676, 437680, 437687,
        437689, 437693, 437697, 437704, 437707, 437716, 437723, 437730, 437737, 437740, 437741,
        437757, 437763, 437771, 437778, 437784, 437789, 437793, 437800, 437804, 437811, 437812,
        437819, 437823, 437827, 437833, 437841, 437844, 437853, 437857, 437861, 437866, 437874,
        437881, 437886, 437892, 437901, 437902, 437909, 437914, 437922, 437928, 437934, 437939,
        437948, 437951, 437957, 437963, 437965, 437971, 437980, 437985, 437990, 437996, 438002,
        438008, 438013, 438017, 438025, 438030, 438036, 438041, 438052, 438060, 438065, 438072,
        438073, 438079, 438084, 438091, 438097, 438099, 438107, 438111, 438119, 438125, 438136,
        438144, 438148, 438153, 438158, 438164, 438166, 438173, 438176, 438183, 438184, 438192,
        438198, 438204, 438209, 438216, 438228, 438231, 438237, 438243, 438248, 438257, 438267,
        438269, 438274, 438282, 438287, 438295, 438301, 438306, 438313, 438318, 438323, 438328,
        438335, 438339, 438346, 438352, 438357, 438363, 438370, 438374, 438380, 438384, 438388,
        438394, 438399, 438404, 438409, 438413, 438422, 438428, 438436, 438439, 438444, 438453,
        438461, 438471, 438477, 438483, 438491, 438503, 438505, 438511, 438518, 438527, 438531,
        438541, 438546, 438552, 438556, 438562, 438566, 438570, 438580, 438585, 438593, 438595,
        438603, 438605, 438607, 438614, 438619, 438626, 438631, 438634, 438641, 438646, 438652,
        438657, 438663, 438664, 438665, 438673, 438677, 438682, 438692, 438700, 438706, 438708,
        438715, 438723, 438727, 438737, 438742, 438753, 438760, 438764, 438771, 438775, 438780,
        438783, 438789, 438797, 438806, 438810, 438815, 438832, 438837, 438841, 438845, 438852,
        438860, 438865, 438873, 438883, 438884, 438896, 438908, 438912, 438920, 438924, 438927,
        438934, 438936, 438940, 438946, 438953, 438961, 438968, 438976, 438980, 438985, 438994,
        439006, 439011, 439017, 439021, 439027, 439032, 439036, 439043, 439047, 439055, 439059,
        439065, 439070, 439075, 439083, 439087, 439093, 439099, 439104, 439109, 439114, 439120,
        439123, 439128, 439130, 439134, 439139, 439147, 439157, 439162, 439167, 439172, 439178,
        439183, 439187, 439194, 439201, 439205, 439210, 439216, 439222, 439225, 439231, 439235,
        439245, 439251, 439255, 439261, 439277, 439282, 439288, 439295, 439302, 439308, 439309,
        439314, 439320, 439328, 439332, 439339, 439345, 439350, 439354, 439359, 439365, 439372,
        439377, 439379, 439386, 439391, 439404, 439410, 439416, 439419, 439425, 439430, 439434,
        439438, 439455, 439461, 439465, 439472, 439476, 439482, 439488, 439493, 439496, 439506,
        439510, 439516, 439521, 439527, 439536, 439543, 439551, 439554, 439557, 439564, 439569,
        439574, 439577, 439584, 439588, 439593, 439597, 439602, 439607, 439613, 439618, 439624,
        439625, 439633, 439638, 439641, 439645, 439650, 439655, 439659, 439669, 439670, 439671,
        439682, 439692, 439696, 439701, 439709, 439718, 439725, 439730, 439733, 439739, 439745,
        439757, 439764, 439768, 439771, 439778, 439783, 439788, 439796, 439805, 439811, 439815,
        439820, 439827, 439830, 439840, 439846, 439850, 439854, 439865, 439873, 439879, 439886,
        439891, 439898, 439903, 439909, 439917, 439925, 439928, 439933, 439938, 439944, 439948,
        439955, 439959, 439965, 439969, 439974, 439988, 439989, 440005, 440008, 440011, 440015,
        440020, 440026, 440030, 440035, 440043, 440044, 440055, 440060, 440078, 440091, 440096,
        440101, 440106, 440111, 440116, 440120, 440134, 440139, 440143, 440149, 440157, 440163,
        440167, 440171, 440179, 440187, 440191, 440196, 440201, 440207, 440213, 440218, 440223,
        440228, 440233, 440239, 440244, 440249, 440256, 440262, 440268, 440274, 440277, 440282,
        440289, 440295, 440307, 440311, 440315, 440321, 440327, 440331, 440336, 440341, 440346,
        440355, 440361, 440368, 440375, 440379, 440388, 440394, 440399, 440402, 440410, 440413,
        440421, 440427, 440431, 440435, 440440, 440446, 440454, 440461, 440467, 440476, 440481,
        440486, 440490, 440495, 440500, 440506, 440512, 440523, 440529, 440533, 440539, 440546,
        440552, 440560, 440568, 440578, 440584, 440590, 440594, 440598, 440606, 440612, 440620,
        440623, 440629, 440634, 440641, 440647, 440651, 440655, 440663, 440669, 440674, 440682,
        440689, 440694, 440698, 440702, 440706, 440713, 440719, 440727, 440733, 440737, 440743,
        440747, 440753, 440760, 440767, 440772, 440779, 440783, 440789, 440792, 440798, 440806,
        440808, 440812, 440819, 440823, 440826, 440830, 440835, 440840, 440845, 440853, 440856,
        440861, 440867, 440872, 440876, 440882, 440888, 440893, 440903, 440910, 440915, 440921,
        440927, 440933, 440938, 440945, 440950, 440958, 440966, 440969, 440973, 440977, 440983,
        440987, 440992, 440996, 441005, 441008, 441013, 441028, 441035, 441042, 441047, 441052,
        441056, 441061, 441068, 441075, 441080, 441087, 441094, 441097, 441106, 441111, 441115,
        441121, 441125, 441132, 441136, 441143, 441150, 441157, 441161, 441167, 441171, 441175,
        441179, 441185, 441193, 441196, 441200, 441204, 441210, 441216, 441223, 441226, 441234,
        441238, 441243, 441253, 441260, 441268, 441276, 441287, 441294, 441297, 441306, 441313,
        441315, 441323, 441332, 441339, 441346, 441353, 441358, 441362, 441368, 441373, 441378,
        441382, 441390, 441394, 441399, 441404, 441411, 441416, 441420, 441427, 441432, 441440,
        441445, 441448, 441453, 441456, 441461, 441467, 441473, 441479, 441484, 441491, 441497,
        441506, 441509, 441515, 441521, 441526, 441531, 441535, 441542, 441547, 441551, 441555,
        441559, 441565, 441569, 441574, 441579, 441596, 441599, 441605, 441610, 441617, 441619,
        441623, 441628, 441630, 441636, 441637, 441651, 441652, 441662, 441664, 441667, 441671,
        441681, 441684, 441689, 441693, 441701, 441705, 441710, 441718, 441720, 441726, 441740,
        441746, 441757, 441759, 441766, 441773, 441775, 441780, 441793, 441794, 441799, 441807,
        441817, 441822, 441828, 441831, 441834, 441838, 441845, 441853, 441857, 441863, 441866,
        441872, 441880, 441883, 441886, 441891, 441895, 441900, 441910, 441915, 441921, 441928,
        441934, 441939, 441945, 441947, 441952, 441957, 441964, 441971, 441974, 441980, 441985,
        441990, 441994, 441998, 442002, 442007, 442010, 442017, 442019, 442027, 442043, 442046,
        442054, 442060, 442067, 442074, 442076, 442081, 442086, 442093, 442099, 442103, 442108,
        442112, 442120, 442131, 442135, 442139, 442144, 442148, 442156, 442161, 442165, 442170,
        442181, 442186, 442192, 442197, 442203, 442220, 442226, 442233, 442239, 442245, 442249,
        442254, 442259, 442267, 442275, 442281, 442284, 442287, 442292, 442299, 442308, 442314,
        442318, 442325, 442332, 442333, 442334, 442346, 442351, 442354, 442358, 442364, 442370,
        442372, 442377, 442381, 442389, 442397, 442402, 442409, 442415, 442419, 442424, 442430,
        442438, 442443, 442451, 442459, 442470, 442473, 442482, 442490, 442496, 442501, 442506,
        442514, 442520, 442524, 442530, 442534, 442541, 442546, 442549, 442554, 442558, 442563,
        442573, 442586, 442591, 442595, 442600, 442607, 442613, 442618, 442624, 442628, 442632,
        442640, 442647, 442651, 442657, 442666, 442674, 442679, 442682, 442686, 442692, 442699,
        442705, 442714, 442718, 442722, 442729, 442734, 442739, 442748, 442751, 442754, 442757,
        442765, 442770, 442778, 442783, 442792, 442798, 442802, 442813, 442820, 442829, 442833,
        442841, 442845, 442851, 442857, 442860, 442865, 442871, 442877, 442882, 442886, 442892,
        442898, 442904, 442906, 442911, 442915, 442922, 442929, 442934, 442940, 442944, 442946,
        442952, 442956, 442963, 442971, 442973, 442979, 442985, 442997, 443001, 443006, 443017,
        443019, 443024, 443027, 443036, 443046, 443050, 443057, 443066, 443069, 443078, 443083,
        443089, 443093, 443100, 443104, 443109, 443118, 443126, 443134, 443141, 443146, 443151,
        443158, 443164, 443169, 443174, 443179, 443182, 443189, 443195, 443198, 443206, 443211,
        443213, 443214, 443222, 443224, 443228, 443235, 443240, 443246, 443255, 443259, 443269,
        443270, 443277, 443285, 443291, 443299, 443303, 443311, 443313, 443319, 443322, 443328,
        443338, 443342, 443350, 443351, 443356, 443362, 443365, 443368, 443371, 443375, 443378,
        443384, 443388, 443391, 443397, 443404, 443412, 443416, 443421, 443424, 443428, 443433,
        443438, 443442, 443449, 443462, 443463, 443470, 443474, 443482, 443490, 443495, 443499,
        443506, 443519, 443523, 443527, 443533, 443540, 443548, 443550, 443556, 443559, 443564,
        443568, 443574, 443582, 443589, 443594, 443596, 443602, 443610, 443612, 443616, 443620,
        443625, 443631, 443638, 443643, 443649, 443656, 443660, 443669, 443672, 443680, 443691,
        443695, 443699, 443706, 443710, 443714, 443718, 443721, 443726, 443734, 443739, 443745,
        443752, 443758, 443765, 443771, 443774, 443781, 443786, 443789, 443793, 443797, 443802,
        443811, 443812, 443820, 443829, 443832, 443838, 443847, 443851, 443856, 443857, 443864,
        443871, 443877, 443886, 443892, 443896, 443903, 443909, 443913, 443920, 443925, 443930,
        443935, 443942, 443946, 443954, 443963, 443966, 443969, 443975, 443979, 443982, 443988,
        443996, 443999, 444003, 444007, 444012, 444019, 444026, 444030, 444040, 444049, 444056,
        444060, 444064, 444069, 444073, 444075, 444078, 444083, 444091, 444098, 444103, 444111,
        444121, 444124, 444130, 444136, 444140, 444145, 444150, 444156, 444162, 444168, 444172,
        444179, 444182, 444186, 444189, 444193, 444198, 444203, 444208, 444212, 444218, 444225,
        444231, 444234, 444240, 444246, 444258, 444265, 444273, 444277, 444281, 444288, 444292,
        444298, 444301, 444309, 444314, 444319, 444327, 444332, 444338, 444349, 444354, 444359,
        444364, 444374, 444377, 444381, 444386, 444388, 444394, 444401, 444406, 444417, 444422,
        444429, 444438, 444439, 444448, 444449, 444456, 444461, 444467, 444473, 444480, 444486,
        444490, 444495, 444500, 444503, 444508, 444514, 444518, 444525, 444528, 444535, 444540,
        444544, 444550, 444556, 444563, 444570, 444576, 444580, 444583, 444587, 444591, 444599,
        444605, 444608, 444612, 444619, 444629, 444635, 444643, 444646, 444652, 444660, 444671,
        444676, 444681, 444686, 444690, 444696, 444703, 444710, 444711, 444720, 444723, 444734,
        444742, 444752, 444758, 444763, 444767, 444770, 444774, 444786, 444789, 444794, 444800,
        444809, 444818, 444822, 444830, 444836, 444841, 444846, 444853, 444859, 444866, 444873,
        444878, 444885, 444890, 444896, 444904, 444907, 444914, 444922, 444924, 444931, 446357,
        488475, 495304, 496119, 497438, 498593, 498603, 498917, 499048, 499713, 500776, 501348,
        503424, 508844, 518359, 519305, 519446, 523627, 523776, 523878, 523902, 524135, 524329,
        524515, 524611, 524686, 524798, 524852, 525209, 525700, 525913, 525954, 526158, 526332,
        526356, 536810, 537279, 563933, 578719, 579248, 579791, 584191, 591485, 592871, 613176,
        615012, 616428, 619153, 636103, 640708, 643141, 645080, 646349, 647043, 649345, 651085,
        652849, 653092, 653169, 653227, 653586, 655241, 656093, 658355, 658564, 659381, 659518,
        690513, 693218, 693746, 694340, 694842, 695155, 695563, 695776, 696380, 697608, 697797,
        698222, 698835, 699307, 700154, 700203, 700235, 700404, 700806, 700900, 701796, 702155,
        702956, 702998, 705105, 705377, 705631, 708650, 709265, 709787, 725122, 735376, 737115,
        737174, 738005, 741377, 741986, 746045, 746404, 746590, 748212, 753574, 754379, 764728,
        765776, 766863, 769126, 782626, 782723, 783529, 786875, 787544, 807281, 811132, 821933,
        822194, 829768, 830997, 831095, 832481, 834082, 844664, 845574, 845764, 846820, 849481,
        855607, 857775, 872350, 876126, 902029, 903509, 904449, 904469, 905915, 910463, 911856,
        924365, 928664, 929314, 929606, 929983, 930478, 933195, 933819, 935628, 935911, 935922,
        936002, 937668, 941895, 942677, 943721, 944661, 944980, 945121, 945268, 945360, 950756,
        951007, 959993, 960787, 961048, 961084, 961238, 961589, 962000, 962797, 962827, 962910,
        963788, 964272, 964343, 964431, 964573, 964949, 965017, 965036, 965041, 965598, 965674,
        965957, 966014, 966032, 966092, 966144, 966226, 966234, 966265, 966291, 978103, 980858,
        987212, 987458, 987498, 988368, 988513, 988939, 990571, 993183, 1005493, 1007972, 1008230,
        1009675, 1010075, 1010685, 1011441, 1011828, 1012269, 1012310, 1013612, 1013907, 1014379,
        1018659, 1018923, 1022035, 1024567, 1024568, 1025024, 1026699, 1027212, 1027840, 1029108,
        1031846, 1032670, 1032970, 1034016, 1039255, 1040626, 1040796, 1043457, 1043632, 1051053,
        1052581, 1091611, 1092316, 1092564, 1092634, 1096386, 1096820, 1098606, 1104201, 1107101,
        1110019, 1111384, 1111707, 1128990, 1129111, 1129147, 1129160, 1129367, 1129408, 1129508,
        1129577, 1129699, 1129750, 1129840, 1129951, 1129988, 1130041, 1130139, 1130177, 1130241,
        1130248, 1130268, 1130276, 1130367, 1130540, 1130562, 1130636, 1130637, 1130662, 1130716,
        1131139, 1131218, 1131250, 1131454, 1131541, 1131775, 1132208, 1132280, 1132901, 1133264,
        1133474, 1133475, 1133764, 1133841, 1133988, 1134290, 1134533, 1134553, 1134614, 1134667,
        1134710, 1134861, 1134896, 1135008, 1135178, 1135544, 1135551, 1135573, 1136260, 1136385,
        1136458, 1136782, 1136960, 1137342, 1137713, 1137824, 1138160, 1138291, 1138340, 1138457,
        1138468, 1138516, 1138526, 1138610, 1138648, 1138700, 1138801, 1138869, 1138999, 1139010,
        1139102, 1139114, 1139145, 1139302, 1139322, 1139417, 1139496, 1139581, 1139668, 1139852,
        1139930, 1139958, 1140325, 1140616, 1140811, 1140861, 1141056, 1141197, 1141311, 1141346,
        1141551, 1141666, 1141735, 1141786, 1141895, 1142017, 1142228, 1142242, 1142415, 1142484,
        1142579, 1142599, 1142867, 1142929, 1143057, 1143132, 1143191, 1143203, 1143293, 1143476,
        1143860, 1143997, 1144044, 1144321, 1144338, 1144459, 1144548, 1144564, 1144588, 1144592,
        1144606, 1144623, 1144718, 1144792, 1144906, 1144997, 1145007, 1145082, 1145274, 1145380,
        1145430, 1145584, 1145731, 1145778, 1145869, 1145914, 1145925, 1146025, 1146158, 1146212,
        1146223, 1146448, 1146594, 1146663, 1146761, 1146803, 1146826, 1146833, 1146898, 1147078,
        1147099, 1147330, 1147382, 1147424, 1147431, 1147472, 1147545, 1147592, 1147627, 1147657,
        1147742, 1148005, 1148699, 1155013, 1155166, 1155915, 1178902, 1179255, 1180871, 1184802,
        1187587, 1190670, 1198632, 1198646, 1198832, 1199211, 1199259, 1199330, 1200318, 1200824,
        1200959, 1201200, 1202513, 1210077, 1210208, 1210296, 1211774, 1211775, 1211776, 1211777,
        1212528, 1212529, 1212843, 1216377, 1219904, 1220650, 1232492, 1235492, 1243381, 1243807,
        1267467, 1267561, 1267615, 1267691, 1267708, 1267731, 1267797, 1273165, 1278015, 1278076,
        1278615, 1279032, 1279185, 1279756, 1281009, 1281074, 1282368, 1284002, 1284572, 1285041,
        1285278, 1285788, 1285969, 1286573, 1286679, 1287001, 1287466, 1287714, 1287819, 1288542,
        1288897, 1289486, 1290086, 1290286, 1291047, 1291363, 1291498, 1291749, 1291853, 1292129,
        1292571, 1292828, 1292855, 1292859, 1292892, 1292893, 1292909, 1292910, 1292956, 1292957,
        1292985, 1293133, 1293185, 1293926, 1294446, 1294490, 1294571, 1294966, 1295003, 1295395,
        1295491, 1296604, 1298327, 1298527, 1298685, 1300235, 1300501, 1301193, 1301345, 1301536,
        1301908, 1301969, 1301988, 1302146, 1302158, 1302810, 1303060, 1303244, 1303275, 1303487,
        1303721, 1303831, 1303943, 1304875, 1305210, 1305677, 1305687, 1306397, 1306865, 1307044,
        1307745, 1307926, 1308080, 1308680, 1309204, 1309475, 1310596, 1312574, 1313313, 1313764,
        1313792, 1313963, 1314093, 1314284, 1314743, 1315154, 1315292, 1315503, 1315994, 1316517,
        1316872, 1316909, 1317089, 1317327, 1318223, 1319657, 1321070, 1321083, 1321495, 1321517,
        1322195, 1322221, 1322293, 1322330, 1322471, 1322496, 1322569, 1322634, 1322716, 1322859,
        1323066, 1323356, 1323530, 1323539, 1323614, 1323868, 1323925, 1328650, 1329210, 1332937,
        1333431, 1335482, 1338092, 1342268, 1345890, 1346245, 1346532, 1346613, 1346783, 1347371,
        1347858, 1348077, 1348468, 1349166, 1349298, 1349335, 1350775, 1350809, 1351329, 1352877};
    int[] array2 = {14402, 14403, 14404, 14405, 14406, 14407, 23246, 23247, 23248, 23249, 23250,
        23936, 23937, 23938, 23939, 23940, 23941, 23942, 29721, 29722, 29723, 29724, 29725, 30226,
        30227, 30228, 30229, 30230, 32141, 32142, 32143, 47737, 47738, 47739, 47740, 47741, 47742,
        47743, 47744, 47745, 47746, 47747, 47748, 47749, 47750, 47751, 47752, 68770, 68771, 68772,
        68773, 68774, 68775, 68776, 68777, 68778, 68779, 68780, 72301, 72302, 83071, 83072, 83073,
        83074, 85302, 85303, 85304, 85305, 85306, 85307, 85308, 85309, 85310, 85311, 85312, 85313,
        85314, 85315, 85316, 97108, 97109, 97110, 97111, 103442, 103443, 103444, 103445, 103446,
        103447, 103448, 103449, 103450, 103451, 103452, 103453, 103454, 103455, 103456, 103457,
        103458, 103459, 103460, 103461, 103462, 103463, 103464, 103465, 103466, 103467, 103468,
        103469, 128488, 128489, 128490, 128491, 128492, 128493, 135003, 135004, 135005, 135006,
        135007, 135008, 135009, 135010, 135011, 135012, 135013, 135014, 140363, 140364, 140365,
        140366, 140367, 140368, 140369, 140370, 140371, 140372, 149844, 149845, 149846, 149847,
        149848, 149849, 149850, 149851, 149852, 149853, 149854, 149855, 149856, 149857, 149858,
        149859, 149860, 149861, 149862, 149863, 149864, 172805, 172806, 172807, 172808, 172809,
        172810, 172811, 172812, 172813, 172814, 172815, 172816, 172817, 172818, 172819, 172820,
        172821, 172822, 172823, 172824, 172825, 172826, 172827, 172828, 172829, 172830, 172831,
        172832, 172833, 172834, 172835, 172836, 172837, 172838, 172839, 172840, 172841, 172842,
        172843, 172844, 172845, 172846, 172847, 172848, 172849, 172850, 172851, 172852, 172853,
        172854, 172855, 172856, 172857, 172858, 172859, 172860, 172861, 172862, 172863, 172864,
        172865, 172866, 172867, 172868, 172869, 172870, 172871, 202530, 202531, 202532, 209488,
        209489, 209490, 209491, 209492, 209493, 209494, 209495, 209496, 209497, 209498, 209499,
        209500, 209501, 209502, 209503, 209504, 209505, 209506, 225554, 225555, 225556, 225557,
        225558, 225559, 225560, 225561, 225562, 225563, 225564, 225565, 225566, 225567, 225568,
        225569, 225570, 225571, 225572, 225573, 225574, 225575, 225576, 225577, 225578, 225579,
        225580, 225581, 227917, 227918, 227919, 227920, 227921, 227922, 227923, 227924, 227925,
        227926, 227927, 227928, 227929, 227930, 227931, 227932, 227933, 227934, 227935, 227936,
        227937, 227938, 227939, 252773, 252774, 252775, 252776, 252777, 252778, 252779, 252780,
        252781, 252782, 252783, 252784, 252785, 252786, 252787, 252788, 252789, 252790, 252791,
        252792, 252793, 252794, 278695, 278696, 278697, 278698, 278699, 301237, 301238, 301239,
        301240, 301241, 301242, 301243, 301244, 301245, 301246, 301247, 301248, 301249, 301250,
        301251, 301252, 301253, 301254, 301255, 301256, 301257, 301258, 301259, 301260, 301261,
        301262, 301263, 301264, 301265, 320515, 320516, 320517, 320518, 320519, 320520, 320521,
        320522, 320523, 320524, 320525, 320526, 320527, 320528, 320529, 320530, 320531, 320532,
        320533, 320534, 320535, 320536, 320537, 320538, 320539, 320540, 320541, 320542, 320543,
        320544, 320545, 320546, 320547, 320548, 329641, 329642, 329643, 329644, 329645, 329646,
        329647, 329648, 329649, 329650, 329651, 329652, 329653, 329654, 329655, 329656, 329657,
        329658, 329659, 342703, 342704, 342705, 342706, 349520, 349521, 349522, 349523, 349524,
        349525, 349526, 349527, 349528, 349529, 349530, 362716, 362717, 362718, 362719, 362720,
        362721, 362722, 362723, 362724, 362725, 362726, 362727, 378643, 378644, 378645, 378646,
        390154, 390155, 390156, 390157, 390158, 390159, 390160, 390161, 390162, 390163, 390164,
        390165, 390166, 390167, 390168, 390169, 395108, 395109, 395110, 395111, 395112, 395113,
        395114, 395115, 403260, 403261, 403262, 403263, 403264, 403265, 403266, 403267, 403268,
        403269, 403270, 403271, 417315, 417316, 417317, 417318, 417319, 417320, 432653, 432654,
        432655, 432656, 432657, 432658, 432659, 432660, 432661, 432662, 432663, 432664, 432665,
        432666, 432667, 432668, 432669, 432670, 432671, 432672, 432673, 432674, 432675, 432676,
        432677, 432678, 449394, 449395, 449396, 449397, 449398, 459961, 459962, 459963, 459964,
        474537, 474538, 474539, 474540, 474541, 474542, 474543, 474544, 474545, 474546, 474547,
        474548, 474549, 474550, 474551, 474552, 474553, 474554, 474555, 474556, 474557, 474558,
        474559, 474560, 474561, 474562, 474563, 474564, 474565, 474566, 474567, 474568, 474569,
        474570, 474571, 474572, 474573, 474574, 474575, 474576, 474577, 474578, 474579, 474580,
        474581, 474582, 474583, 474584, 474585, 474586, 474587, 474588, 474589, 474590, 474591,
        474592, 474593, 474594, 474595, 474596, 474597, 483571, 483572, 483573, 483574, 483575,
        483576, 489641, 489642, 489643, 489644, 489645, 489646, 489647, 489648, 489649, 489650,
        489651, 491296, 491297, 491298, 495868, 495869, 495870, 502769, 502770, 502771, 502772,
        502773, 502774, 502775, 502776, 502777, 502778, 502779, 502780, 502781, 502782, 502783,
        513810, 513811, 513812, 513813, 513814, 513815, 513816, 513817, 513818, 513819, 513820,
        513821, 513822, 513823, 513824, 513825, 513826, 513827, 513828, 513829, 513830, 513831,
        513832, 517220, 517221, 517222, 517223, 517224, 517225, 517226, 517227, 519778, 519779,
        519780, 519781, 519782, 519783, 519784, 519785, 524240, 524241, 524242, 524243, 524244,
        524245, 524246, 524247, 524248, 524249, 527255, 527256, 527257, 527258, 527259, 533697,
        533698, 533699, 533700, 533701, 533702, 533703, 533704, 533705, 533706, 533707, 533708,
        533709, 539237, 539238, 539239, 539240, 539241, 539242, 539243, 562203, 562204, 562205,
        562206, 569773, 569774, 569775, 569776, 569777, 569778, 569779, 569780, 569781, 569782,
        569783, 569784, 569785, 569786, 569787, 569788, 569789, 569790, 569791, 569792, 569793,
        569794, 569795, 569796, 569797, 569798, 569799, 569800, 569801, 569802, 569803, 569804,
        569805, 569806, 569807, 569808, 569809, 569810, 569811, 569812, 569813, 569814, 569815,
        569816, 569817, 569818, 569819, 569820, 569821, 580161, 580162, 580163, 580164, 580165,
        580166, 580167, 580168, 580169, 580170, 580171, 580172, 580173, 580174, 580175, 580176,
        588299, 588300, 588301, 588302, 588303, 588304, 588305, 588306, 588307, 588308, 588309,
        588310, 588311, 588312, 588313, 588314, 588315, 588316, 588317, 588318, 588319, 588320,
        588321, 588322, 588323, 588324, 588325, 588326, 588327, 588328, 588329, 588330, 588331,
        588332, 588333, 588334, 588335, 608580, 608581, 608582, 608583, 608584, 608585, 608586,
        608587, 608588, 608589, 608590, 608591, 608592, 608593, 608594, 608595, 608596, 608597,
        608598, 608599, 608600, 608601, 608602, 608603, 608604, 608605, 618326, 618327, 618328,
        618329, 618330, 618331, 618332, 618333, 618334, 618335, 618336, 618337, 618338, 618339,
        618340, 618341, 618342, 618343, 618344, 618345, 618346, 618347, 618348, 618349, 626895,
        626896, 626897, 626898, 626899, 626900, 635313, 635314, 635315, 635316, 635317, 635318,
        635319, 635320, 635321, 635322, 635323, 635324, 635325, 635326, 635327, 635328, 635329,
        635330, 635331, 635332, 635333, 635334, 635335, 635336, 635337, 635338, 635339, 635340,
        635341, 635342, 635343, 635344, 635345, 635346, 635347, 635348, 635349, 635350, 635351,
        635352, 635353, 635354, 635355, 648087, 648088, 648089, 648090, 648091, 648092, 648093,
        648094, 648095, 648096, 648097, 648098, 648099, 648100, 648101, 648102, 648103, 648104,
        648105, 648106, 648107, 648108, 648109, 648110, 661574, 661575, 661576, 661577, 674566,
        674567, 674568, 674569, 674570, 674571, 674572, 674573, 674574, 674575, 674576, 674577,
        674578, 674579, 674580, 674581, 674582, 674583, 674584, 674585, 689328, 689329, 689330,
        689331, 689332, 689333, 689334, 689335, 689336, 689337, 697978, 697979, 697980, 697981,
        697982, 697983, 697984, 697985, 697986, 697987, 697988, 697989, 697990, 697991, 697992,
        697993, 697994, 726676, 726677, 726678, 726679, 726680, 726681, 782220, 782221, 782222,
        782223, 782224, 782225, 782226, 782227, 782228, 782229, 782230, 782231, 782232, 782233,
        782234, 782235, 782236, 782237, 782238, 782239, 797574, 797575, 797576, 797577, 797578,
        797579, 797580, 797581, 797582, 804283, 804284, 804285, 822332, 822333, 822334, 822335,
        822336, 831020, 831021, 831022, 831023, 831024, 831025, 831026, 831027, 831028, 831029,
        831030, 831031, 831032, 831033, 831034, 831035, 831036, 831037, 831038, 831039, 831040,
        847227, 847228, 847229, 847230, 847231, 847232, 847233, 847234, 847235, 847236, 847237,
        847238, 847239, 847240, 847241, 847242, 847243, 847244, 847245, 857616, 857617, 857618,
        857619, 857620, 857621, 857622, 857623, 857624, 857625, 867324, 867325, 867326, 867327,
        867328, 867329, 867330, 867331, 867332, 867333, 867334, 867335, 867336, 867337, 867338,
        867339, 877587, 877588, 877589, 877590, 877591, 877592, 877593, 877594, 877595, 877596,
        877597, 877598, 877599, 877600, 877601, 877602, 877603, 877604, 877605, 877606, 877607,
        877608, 877609, 877610, 877611, 877612, 877613, 877614, 877615, 896235, 896236, 896237,
        896238, 896239, 896240, 916629, 916630, 916631, 916632, 929361, 929362, 929363, 929364,
        929365, 929366, 929367, 929368, 929369, 929370, 929371, 948695, 948696, 948697, 948698,
        948699, 948700, 948701, 948702, 949573, 949574, 957768, 957769, 957770, 957771, 957772,
        957773, 957774, 957775, 961032, 961033, 961034, 961035, 987440, 987441, 987442, 987443,
        1001434, 1001435, 1001436, 1001437, 1001438, 1001439, 1001440, 1001441, 1001442, 1001443,
        1001444, 1001445, 1001446, 1001447, 1001448, 1001449, 1001450, 1001451, 1001452, 1001453,
        1001454, 1001455, 1001456, 1001457, 1001458, 1001459, 1001460, 1009985, 1009986, 1009987,
        1009988, 1009989, 1037191, 1037192, 1037193, 1037194, 1037195, 1037196, 1037197, 1037198,
        1037199, 1037200, 1037201, 1037202, 1037203, 1037204, 1053198, 1053199, 1053200, 1053201,
        1053202, 1053203, 1053204, 1053205, 1053206, 1053207, 1053208, 1053209, 1053210, 1053211,
        1053212, 1053213, 1053214, 1053215, 1053216, 1053217, 1053218, 1053219, 1053220, 1053221,
        1053222, 1053223, 1053224, 1084019, 1084020, 1084021, 1084022, 1084023, 1084024, 1084025,
        1088361, 1088362, 1088363, 1088364, 1088365, 1088366, 1089312, 1089313, 1089314, 1089315,
        1089316, 1089317, 1089318, 1092235, 1092236, 1092237, 1092238, 1092239, 1092240, 1092241,
        1092242, 1092243, 1092244, 1102836, 1102837, 1102838, 1102839, 1102840, 1102841, 1102842,
        1102843, 1102844, 1102845, 1102846, 1102847, 1108575, 1108576, 1108577, 1108578, 1108579,
        1108580, 1108581, 1108582, 1108583, 1108584, 1108585, 1108586, 1108587, 1108588, 1108589,
        1108590, 1108591, 1108592, 1108593, 1108594, 1108595, 1108596, 1108597, 1108598, 1134091,
        1134092, 1134093, 1134094, 1134095, 1134096, 1134097, 1134098, 1134099, 1134100, 1134101,
        1134102, 1134103, 1134104, 1134105, 1134106, 1134107, 1134108, 1134109, 1134110, 1134111,
        1134112, 1134113, 1134114, 1134115, 1134116, 1134117, 1134118, 1134119, 1134120, 1134121,
        1134122, 1134123, 1134124, 1134125, 1134126, 1134127, 1134128, 1134129, 1151732, 1151733,
        1151734, 1151735, 1151736, 1151737, 1151738, 1151739, 1151740, 1151741, 1151742, 1151743,
        1151744, 1151745, 1151746, 1151747, 1199223, 1199224, 1199225, 1199226, 1203252, 1203253,
        1203254, 1203255, 1203256, 1203257, 1203258, 1203259, 1203260, 1217223, 1217224, 1217225,
        1217226, 1226505, 1226506, 1226507, 1226508, 1226509, 1226510, 1226511, 1226512, 1231411,
        1231412, 1231413, 1231414, 1231415, 1231416, 1231417, 1231418, 1231419, 1231420, 1231421,
        1231422, 1231423, 1243464, 1243465, 1243466, 1243467, 1243468, 1243469, 1243470, 1247919,
        1247920, 1247921, 1255972, 1255973, 1255974, 1255975, 1255976, 1255977, 1255978, 1255979,
        1255980, 1263675, 1263676, 1263677, 1263678, 1263679, 1277693, 1277694, 1277695, 1277696,
        1277697, 1277698, 1277699, 1277700, 1283492, 1283493, 1283494, 1283495, 1283496, 1283497,
        1283498, 1283499, 1283500, 1283501, 1283502, 1283503, 1283504, 1283505, 1283506, 1283507,
        1283508, 1283509, 1283510, 1283511, 1283512, 1283513, 1283514, 1325789, 1325790, 1325791,
        1325792, 1325793, 1325794, 1325795, 1325796, 1325797, 1325798, 1325799};
    MutableRoaringBitmap rb1 = MutableRoaringBitmap.bitmapOf(array1);
    MutableRoaringBitmap rb2 = MutableRoaringBitmap.bitmapOf(array2);
    MutableRoaringBitmap rrb1 = rb1.clone();
    MutableRoaringBitmap rrb2 = rb2.clone();
    rrb1.runOptimize();
    rrb2.runOptimize();
    Assert.assertEquals(MutableRoaringBitmap.or(rb1, rb2), MutableRoaringBitmap.or(rrb1, rrb2));
  }

  @Test
  public void testAndNot() {
    int[] array1 = {39173, 39174, 39175, 39176, 39177, 39178, 39179, 39180, 39181, 39182, 39183,
        39184, 39185, 39186, 39187, 39188};
    int[] array2 = {14205};
    MutableRoaringBitmap rb1 = MutableRoaringBitmap.bitmapOf(array1);
    MutableRoaringBitmap rb2 = MutableRoaringBitmap.bitmapOf(array2);
    MutableRoaringBitmap answer = MutableRoaringBitmap.andNot(rb1, rb2);
    Assert.assertEquals(answer.getCardinality(), array1.length);
  }

  @Test
  public void testEqual() {
    MutableRoaringBitmap rr1 = MutableRoaringBitmap.bitmapOf(1, 2, 100000);
    MutableRoaringBitmap rr2 = MutableRoaringBitmap.bitmapOf(3, 4, 100001);
    MutableRoaringBitmap rr3 = MutableRoaringBitmap.bitmapOf(1, 2, 100000);
    Assert.assertEquals(rr1, rr3);
    Assert.assertNotEquals(rr1, rr2);
    Assert.assertNotEquals(rr3, rr2);
  }

  @Test
  public void bitmapOfTest() {
    int[] cuiRelsArray = new int[1024];
    for (int k = 0; k < cuiRelsArray.length; ++k) {
      cuiRelsArray[k] = k;
    }
    MutableRoaringBitmap rr1 = MutableRoaringBitmap.bitmapOf(cuiRelsArray);
    int[] back = rr1.toArray();
    Assert.assertArrayEquals(cuiRelsArray, back);
  }

  @Test
  public void testHighBits() {
    for (int offset = 1 << 14; offset < 1 << 18; offset *= 2) {
      MutableRoaringBitmap rb = new MutableRoaringBitmap();
      RoaringBitmap srb = new RoaringBitmap();
      for (long k = Integer.MIN_VALUE; k < Integer.MAX_VALUE; k += offset) {
        rb.add((int) k);
        srb.add((int) k);
      }
      int cardinality = 0;
      for (long k = Integer.MIN_VALUE; k < Integer.MAX_VALUE; k += offset) {
        Assert.assertTrue(rb.contains((int) k));
        ++cardinality;
      }
      int[] array = rb.toArray();
      int[] sarray = srb.toArray();
      Assert.assertTrue(Arrays.equals(sarray, array));
      Assert.assertTrue(array.length == cardinality);
    }
  }


  @Test
  public void testCheckedRemove() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    // checking if the true value is well returned
    // when adding new ints
    for (int i = 0; i < 2 * (1 << 16); i++) {
      rb.add(i);
    }
    for (int i = 0; i < 2 * (1 << 16); i += 2) {
      Assert.assertTrue(rb.checkedRemove(i));
    }
    for (int i = 0; i < 2 * (1 << 16); i += 2) {
      Assert.assertFalse(rb.checkedRemove(i));
    }
    for (int i = 1; i < 2 * (1 << 16); i += 2) {
      Assert.assertTrue(rb.checkedRemove(i));
    }
    for (int i = 1; i < 2 * (1 << 16) + 1; i += 2) {
      Assert.assertFalse(rb.checkedRemove(i));
    }
  }


  @Test
  public void testCheckedAdd() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    // checking if the true value is well returned
    // when adding new ints
    for (int i = 0; i < 2 * (1 << 16); i += 2) {
      Assert.assertTrue(rb.checkedAdd(i));
    }
    for (int i = 1; i < 2 * (1 << 16); i += 2) {
      Assert.assertTrue(rb.checkedAdd(i));
    }
    // Checking if the false value is well returned
    // when adding already existing ints
    for (int i = 0; i < 2 * (1 << 16); i += 2) {
      Assert.assertFalse(rb.checkedAdd(i));
    }
    for (int i = 1; i < 2 * (1 << 16) + 1; i += 2) {
      Assert.assertFalse(rb.checkedAdd(i));
    }
  }

  @Test
  public void testFlip() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < 1 << 20; ++i) {
      rb.flip(i);
      assertEquals(rb.getCardinality(), i + 1);
    }
    for (int i = (1 << 20) - 1; i >= 0; --i) {
      rb.flip(i);
      assertEquals(rb.getCardinality(), i);
    }
  }

  @Test
  public void testSetUtilIntersection() {
    short data1[] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18};
    ShortBuffer b1 = ShortBuffer.wrap(data1);
    short data2[] = {0, 3, 6, 9, 12, 15, 18};
    ShortBuffer b2 = ShortBuffer.wrap(data2);
    short result[] = new short[data1.length + data2.length];
    short expectedresult[] = {0, 6, 12, 18};
    int nl = BufferUtil.unsignedLocalIntersect2by2(b1, b1.limit(), b2, b2.limit(), result);
    result = Arrays.copyOf(result, nl);
    Assert.assertTrue(Arrays.equals(expectedresult, result));
  }


  @Test
  public void testXORSimple() {
    MutableRoaringBitmap a = MutableRoaringBitmap.bitmapOf(73647, 83469);
    MutableRoaringBitmap b = MutableRoaringBitmap.bitmapOf(1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16,
        17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 50, 51, 69,
        79, 80, 81, 88, 89, 172);
    MutableRoaringBitmap rxor = ImmutableRoaringBitmap.xor(a, b);
    MutableRoaringBitmap ror = MutableRoaringBitmap.or(a, b);
    Assert.assertTrue(rxor.equals(ror));
  }

  @Test
  public void testRank() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int k = 0; k < 100000; k += 7) {
      rb.add(k);
    }
    for (int k = 100000; k < 200000; k += 1000) {
      rb.add(k);
    }
    for (int k = 0; k < 100000; ++k) {
      Assert.assertEquals(1 + k / 7, rb.rank(k));
    }
    for (int k = 100000; k < 200000; ++k) {
      Assert.assertEquals(1 + 100000 / 7 + 1 + (k - 100000) / 1000, rb.rank(k));
    }
  }


  @Test
  public void testRankBigInts() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int k = 0; k < 100000; k += 7) {
      rb.add((1<<31)+k);
    }
    for (int k = 100000; k < 200000; k += 1000) {
      rb.add((1<<31)+k);
    }
    for (int k = 0; k < 100000; ++k) {
      Assert.assertEquals(1 + k / 7, rb.rank((1<<31)+k));
    }
    for (int k = 100000; k < 200000; ++k) {
      Assert.assertEquals(1 + 100000 / 7 + 1 + (k - 100000) / 1000, rb.rank((1<<31)+k));
    }
  }


  @Test
  public void testSelect() {
    for (int gap = 1; gap <= 1024; gap *= 2) {
      MutableRoaringBitmap rb = new MutableRoaringBitmap();
      for (int k = 0; k < 100000; k += gap) {
        rb.add(k);
      }
      for (int k = 0; k < 100000 / gap; ++k) {
        Assert.assertEquals(k * gap, rb.select(k));
      }
    }
  }


  @Test
  public void testSelectBigInts() {
    for (int gap = 1; gap <= 1024; gap *= 2) {
      MutableRoaringBitmap rb = new MutableRoaringBitmap();
      for (int k = 0; k < 100000; k += gap) {
        rb.add((1<<31)+k);
      }
      for (int k = 0; k < 100000 / gap; ++k) {
        Assert.assertEquals((1<<31)+k * gap, rb.select(k));
      }
    }
  }

  @Test
  public void testLimit() {
    for (int gap = 1; gap <= 1024; gap *= 2) {
      MutableRoaringBitmap rb = new MutableRoaringBitmap();
      for (int k = 0; k < 100000; k += gap) {
        rb.add(k);
      }
      int thiscard = rb.getCardinality();
      for (int k = 0; k < thiscard; k += 100) {
        MutableRoaringBitmap limited = rb.limit(k);
        Assert.assertEquals(limited.getCardinality(), k);
      }
      Assert.assertEquals(rb.limit(thiscard).getCardinality(), thiscard);
      Assert.assertEquals(rb.limit(thiscard + 1).getCardinality(), thiscard);
    }
  }



  @Test
  public void testLimitBitInts() {
    for (int gap = 1; gap <= 1024; gap *= 2) {
      MutableRoaringBitmap rb = new MutableRoaringBitmap();
      for (int k = 0; k < 100000; k += gap) {
          rb.add((1<<31)+k);
      }
      int thiscard = rb.getCardinality();
      for (int k = 0; k < thiscard; k += 100) {
        MutableRoaringBitmap limited = rb.limit(k);
        Assert.assertEquals(limited.getCardinality(), k);
      }
      Assert.assertEquals(rb.limit(thiscard).getCardinality(), thiscard);
      Assert.assertEquals(rb.limit(thiscard + 1).getCardinality(), thiscard);
    }
  }


  @Test
  public void testHorizontalOrCardinality() {
    int[] vals = {65535, 131071, 196607, 262143, 327679, 393215, 458751, 524287};
    final MutableRoaringBitmap[] b = new MutableRoaringBitmap[2];
    b[0] = MutableRoaringBitmap.bitmapOf(vals);
    b[1] = MutableRoaringBitmap.bitmapOf(vals);
    MutableRoaringBitmap a = BufferFastAggregation.or(new Iterator<ImmutableRoaringBitmap>() {
      int k = 0;

      @Override
      public boolean hasNext() {
        return k < b.length;
      }

      @Override
      public void remove() {}

      @Override
      public ImmutableRoaringBitmap next() {
        return b[k++];
      }
    });
    Assert.assertEquals(8, a.getCardinality());
  }


 @Test
  public void testHorizontalOrCardinalityBigInts() {
     int[] vals = {(1<<31)+65535, (1<<31)+131071, (1<<31)+196607, (1<<31)+262143, (1<<31)+327679, (1<<31)+393215, (1<<31)+458751, (1<<31)+524287};
    final MutableRoaringBitmap[] b = new MutableRoaringBitmap[2];
    b[0] = MutableRoaringBitmap.bitmapOf(vals);
    b[1] = MutableRoaringBitmap.bitmapOf(vals);
    MutableRoaringBitmap a = BufferFastAggregation.or(new Iterator<ImmutableRoaringBitmap>() {
      int k = 0;

      @Override
      public boolean hasNext() {
        return k < b.length;
      }

      @Override
      public void remove() {}

      @Override
      public ImmutableRoaringBitmap next() {
        return b[k++];
      }
    });
    Assert.assertEquals(8, a.getCardinality());
  }


  @Test
  public void testContains() throws IOException {
    System.out.println("test contains");
    MutableRoaringBitmap rbm1 = new MutableRoaringBitmap();
    for (int k = 0; k < 1000; ++k) {
      rbm1.add(17 * k);
    }
    for (int k = 0; k < 17 * 1000; ++k) {
      Assert.assertTrue(rbm1.contains(k) == (k / 17 * 17 == k));
    }
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    DataOutputStream dos = new DataOutputStream(bos);
    rbm1.serialize(dos);
    dos.close();
    ByteBuffer bb = ByteBuffer.allocateDirect(bos.size());
    bb.put(bos.toByteArray());
    bb.flip();
    ImmutableRoaringBitmap rrback1 = new ImmutableRoaringBitmap(bb);
    for (int k = 0; k < 17 * 1000; ++k) {

      Assert.assertTrue(rrback1.contains(k) == (k / 17 * 17 == k));
    }
  }

  @Test
  public void testHash() {
    MutableRoaringBitmap rbm1 = new MutableRoaringBitmap();
    rbm1.add(17);
    MutableRoaringBitmap rbm2 = new MutableRoaringBitmap();
    rbm2.add(17);
    Assert.assertTrue(rbm1.hashCode() == rbm2.hashCode());
    rbm2 = rbm1.clone();
    Assert.assertTrue(rbm1.hashCode() == rbm2.hashCode());
  }

  @Test
  public void sparseAndNot() {
    final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
    rr1.add(1);
    rr1.add(1 << 31);
    System.out.println("rr1.contains(1)= " + rr1.contains(1));
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(1 << 31);
    MutableRoaringBitmap andNot = MutableRoaringBitmap.andNot(rr1, rr2);
    Assert.assertEquals(1, andNot.getCardinality());
    Assert.assertTrue(andNot.contains(1));
    rr1.andNot(rr2);
    Assert.assertEquals(1, rr1.getCardinality());
    Assert.assertTrue(andNot.contains(1));
  }

  @Test
  public void ANDNOTtest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65535; k < 4 * 65535 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65535; k < 8 * 65535 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65535; k < 9 * 65535 + 30000; ++k) {
      rr.add(k);
    }

    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
    }
    for (int k = 3 * 65536 + 2000; k < 3 * 65536 + 6000; ++k) {
      rr2.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 7 * 65535; k < 7 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65535; k < 10 * 65535 + 5000; ++k) {
      rr2.add(k);
    }
    final MutableRoaringBitmap correct = MutableRoaringBitmap.andNot(rr, rr2);
    rr.andNot(rr2);
    Assert.assertTrue(correct.equals(rr));
  }

  @Test
  public void andnottest4() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();

    for (int i = 0; i < 200000; i += 4) {
      rb2.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb2.add(i);
    }
    rb2.getCardinality();

    // check or against an empty bitmap
    final MutableRoaringBitmap andNotresult = MutableRoaringBitmap.andNot(rb, rb2);
    final MutableRoaringBitmap off = MutableRoaringBitmap.andNot(rb2, rb);

    Assert.assertEquals(rb, andNotresult);
    Assert.assertEquals(rb2, off);
    rb2.andNot(rb);
    Assert.assertEquals(rb2, off);

  }

  @Test
  public void sparseAnd() {
    final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
    rr1.add(1);
    rr1.add(1 << 31);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(1 << 31);
    MutableRoaringBitmap and = MutableRoaringBitmap.and(rr1, rr2);
    Assert.assertEquals(1, and.getCardinality());
    Assert.assertTrue(and.contains(1 << 31));
    rr1.and(rr2);
    Assert.assertEquals(1, rr1.getCardinality());
    Assert.assertTrue(and.contains(1 << 31));
  }

  @Test
  public void andtest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(13);
    final MutableRoaringBitmap rrand = MutableRoaringBitmap.and(rr, rr2);
    int[] array = rrand.toArray();

    Assert.assertEquals(array.length, 1);
    Assert.assertEquals(array[0], 13);
    rr.and(rr2);
    array = rr.toArray();
    Assert.assertEquals(array.length, 1);
    Assert.assertEquals(array[0], 13);
  }

  @Test
  public void ANDtest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65535; k < 4 * 65535 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65535; k < 8 * 65535 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65535; k < 9 * 65535 + 30000; ++k) {
      rr.add(k);
    }

    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
    }
    for (int k = 3 * 65536 + 2000; k < 3 * 65536 + 6000; ++k) {
      rr2.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 7 * 65535; k < 7 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65535; k < 10 * 65535 + 5000; ++k) {
      rr2.add(k);
    }
    final MutableRoaringBitmap correct = MutableRoaringBitmap.and(rr, rr2);
    rr.and(rr2);
    Assert.assertTrue(correct.equals(rr));
  }

  @Test
  public void andtest2() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(13);
    final MutableRoaringBitmap rrand = MutableRoaringBitmap.and(rr, rr2);

    final int[] array = rrand.toArray();
    Assert.assertEquals(array.length, 1);
    Assert.assertEquals(array[0], 13);
  }

  @Test
  public void andtest3() {
    final int[] arrayand = new int[11256];
    int pos = 0;
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536 + 1000; k < 3 * 65536 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536 + 7000; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65536; k < 4 * 65536 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65536; k < 6 * 65536 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65536; k < 8 * 65536 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65536; k < 9 * 65536 + 30000; ++k) {
      rr.add(k);
    }

    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 3 * 65536 + 1000; k < 3 * 65536 + 7000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 6 * 65536; k < 6 * 65536 + 1000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 7 * 65536; k < 7 * 65536 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65536; k < 10 * 65536 + 5000; ++k) {
      rr2.add(k);
    }

    final MutableRoaringBitmap rrand = MutableRoaringBitmap.and(rr, rr2);

    final int[] arrayres = rrand.toArray();

    for (int i = 0; i < arrayres.length; i++) {
      if (arrayres[i] != arrayand[i]) {
        System.out.println(arrayres[i]);
      }
    }

    Assert.assertTrue(Arrays.equals(arrayand, arrayres));

  }

  @Test
  public void andtest4() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();

    for (int i = 0; i < 200000; i += 4) {
      rb2.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb2.add(i);
    }

    // check or against an empty bitmap
    final MutableRoaringBitmap andresult = MutableRoaringBitmap.and(rb, rb2);
    final MutableRoaringBitmap off = MutableRoaringBitmap.and(rb2, rb);
    Assert.assertTrue(andresult.equals(off));

    Assert.assertEquals(0, andresult.getCardinality());

    for (int i = 500000; i < 600000; i += 14) {
      rb.add(i);
    }
    for (int i = 200000; i < 400000; i += 3) {
      rb2.add(i);
    }
    // check or against an empty bitmap
    final MutableRoaringBitmap andresult2 = MutableRoaringBitmap.and(rb, rb2);
    Assert.assertEquals(0, andresult.getCardinality());

    Assert.assertEquals(0, andresult2.getCardinality());
    for (int i = 0; i < 200000; i += 4) {
      rb.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb.add(i);
    }
    Assert.assertEquals(0, andresult.getCardinality());
    final MutableRoaringBitmap rc = MutableRoaringBitmap.and(rb, rb2);
    rb.and(rb2);
    Assert.assertEquals(rc.getCardinality(), rb.getCardinality());

  }

  @Test
  public void ArrayContainerCardinalityTest() {
    final MappeableArrayContainer ac = new MappeableArrayContainer();
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      Assert.assertEquals(ac.getCardinality(), k + 1);
    }
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      Assert.assertEquals(ac.getCardinality(), 100);
    }
  }

  @Test
  public void trimArrayContainerCardinalityTest() {
    final MappeableArrayContainer ac = new MappeableArrayContainer();
    ac.trim();
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      ac.trim();
      Assert.assertEquals(ac.getCardinality(), k + 1);
    }
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      ac.trim();
      Assert.assertEquals(ac.getCardinality(), 100);
    }
  }

  @Test
  public void trimTest() {
    // with bitmap containing 4k containers
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < 4000; i++) {
      rb.add((1 << 16) * i);
    }

    rb.trim();

    int wastedBytes = 0;
    final int javaReferenceSize = 4; // or 8 depending on factors
    MutableRoaringArray ra = rb.getMappeableRoaringArray();
    wastedBytes += Short.BYTES * (ra.keys.length - ra.size);
    wastedBytes += javaReferenceSize * (ra.values.length - ra.size);
    MappeableContainerPointer cp = ra.getContainerPointer();
    while (cp.getContainer() != null) {
      if (cp.isBitmapContainer()) {
        ; //nothing wasted
      } else if (cp.isRunContainer()) {
        MappeableRunContainer rc = (MappeableRunContainer) cp.getContainer();
        wastedBytes += Short.BYTES * (rc.valueslength.limit() - rc.numberOfRuns());
      } else {
        MappeableArrayContainer ac = (MappeableArrayContainer) cp.getContainer();
        wastedBytes += Short.BYTES * (ac.content.limit() - ac.cardinality);
      }
      cp.advance();
    }
    Assert.assertEquals(0, wastedBytes);
  }

  @Test
  public void arraytest() {
    final MappeableArrayContainer rr = new MappeableArrayContainer();
    rr.add((short) 110);
    rr.add((short) 114);
    rr.add((short) 115);
    final short[] array = new short[3];
    int pos = 0;
    for (final short i : rr) {
      array[pos++] = i;
    }
    Assert.assertEquals(array[0], (short) 110);
    Assert.assertEquals(array[1], (short) 114);
    Assert.assertEquals(array[2], (short) 115);
  }

  @Test
  public void basictest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    final int N = 4000;
    final int[] a = new int[N + 2];
    int pos = 0;
    for (int k = 0; k < N; ++k) {
      rr.add(k);
      a[pos++] = k;
    }
    rr.add(100000);
    a[pos++] = 100000;
    rr.add(110000);
    a[pos++] = 110000;
    final int[] array = rr.toArray();
    for (int i = 0; i < array.length; i++) {
      if (array[i] != a[i]) {
        System.out.println("rr : " + array[i] + " a : " + a[i]);
      }
    }
    Assert.assertTrue(Arrays.equals(array, a));
  }

  @Test
  public void BitmapContainerCardinalityTest() {
    final MappeableBitmapContainer ac = new MappeableBitmapContainer();
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      Assert.assertEquals(ac.getCardinality(), k + 1);
    }
    for (short k = 0; k < 100; ++k) {
      ac.add(k);
      Assert.assertEquals(ac.getCardinality(), 100);
    }
  }

  @Test
  public void bitmaptest() {
    final MappeableBitmapContainer rr = new MappeableBitmapContainer();
    rr.add((short) 110);
    rr.add((short) 114);
    rr.add((short) 115);
    final short[] array = new short[3];
    int pos = 0;
    for (final short i : rr) {
      array[pos++] = i;
    }
    Assert.assertEquals(array[0], (short) 110);
    Assert.assertEquals(array[1], (short) 114);
    Assert.assertEquals(array[2], (short) 115);
  }

  @Test
  public void cardinalityTest() {
    final int N = 1024;
    for (int gap = 7; gap < 100000; gap *= 10) {
      for (int offset = 2; offset <= 1024; offset *= 2) {
        final MutableRoaringBitmap rb = new MutableRoaringBitmap();
        // check the add of new values
        for (int k = 0; k < N; k++) {
          rb.add(k * gap);
          Assert.assertEquals(rb.getCardinality(), k + 1);
        }
        Assert.assertEquals(rb.getCardinality(), N);
        // check the add of existing values
        for (int k = 0; k < N; k++) {
          rb.add(k * gap);
          Assert.assertEquals(rb.getCardinality(), N);
        }

        final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();

        for (int k = 0; k < N; k++) {
          rb2.add(k * gap * offset);
          Assert.assertEquals(rb2.getCardinality(), k + 1);
        }

        Assert.assertEquals(rb2.getCardinality(), N);

        for (int k = 0; k < N; k++) {
          rb2.add(k * gap * offset);
          Assert.assertEquals(rb2.getCardinality(), N);
        }
        Assert.assertEquals(MutableRoaringBitmap.and(rb, rb2).getCardinality(), N / offset);
        Assert.assertEquals(MutableRoaringBitmap.or(rb, rb2).getCardinality(), 2 * N - N / offset);
        Assert.assertEquals(MutableRoaringBitmap.xor(rb, rb2).getCardinality(),
            2 * N - 2 * N / offset);
      }
    }
  }

  @Test
  public void clearTest() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int i = 0; i < 200000; i += 7) {
      // dense
      rb.add(i);
    }
    for (int i = 200000; i < 400000; i += 177) {
      // sparse
      rb.add(i);
    }

    final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb3 = new MutableRoaringBitmap();
    for (int i = 0; i < 200000; i += 4) {
      rb2.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb2.add(i);
    }

    rb.clear();
    Assert.assertEquals(0, rb.getCardinality());
    Assert.assertTrue(0 != rb2.getCardinality());

    rb.add(4);
    rb3.add(4);
    final MutableRoaringBitmap andresult = MutableRoaringBitmap.and(rb, rb2);
    final MutableRoaringBitmap orresult = MutableRoaringBitmap.or(rb, rb2);

    Assert.assertEquals(1, andresult.getCardinality());
    Assert.assertEquals(rb2.getCardinality(), orresult.getCardinality());

    for (int i = 0; i < 200000; i += 4) {
      rb.add(i);
      rb3.add(i);
    }
    for (int i = 200000; i < 400000; i += 114) {
      rb.add(i);
      rb3.add(i);
    }

    final int[] arrayrr = rb.toArray();
    final int[] arrayrr3 = rb3.toArray();

    Assert.assertTrue(Arrays.equals(arrayrr, arrayrr3));
  }

  @Test
  public void ContainerFactory() {
    MappeableBitmapContainer bc1, bc2, bc3;
    MappeableArrayContainer ac1, ac2, ac3;

    bc1 = new MappeableBitmapContainer();
    bc2 = new MappeableBitmapContainer();
    bc3 = new MappeableBitmapContainer();
    ac1 = new MappeableArrayContainer();
    ac2 = new MappeableArrayContainer();
    ac3 = new MappeableArrayContainer();

    for (short i = 0; i < 5000; i++) {
      bc1.add((short) (i * 70));
    }
    for (short i = 0; i < 5000; i++) {
      bc2.add((short) (i * 70));
    }
    for (short i = 0; i < 5000; i++) {
      bc3.add((short) (i * 70));
    }

    for (short i = 0; i < 4000; i++) {
      ac1.add((short) (i * 50));
    }
    for (short i = 0; i < 4000; i++) {
      ac2.add((short) (i * 50));
    }
    for (short i = 0; i < 4000; i++) {
      ac3.add((short) (i * 50));
    }

    MappeableBitmapContainer rbc;

    rbc = ac1.clone().toBitmapContainer();
    Assert.assertTrue(validate(rbc, ac1));
    rbc = ac2.clone().toBitmapContainer();
    Assert.assertTrue(validate(rbc, ac2));
    rbc = ac3.clone().toBitmapContainer();
    Assert.assertTrue(validate(rbc, ac3));
  }

  @Test
  public void flipTest1() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();

    rb.flip(100000L, 200000L); // in-place on empty bitmap
    final int rbcard = rb.getCardinality();
    Assert.assertEquals(100000, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 100000; i < 200000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest1A() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();

    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 200000L);
    final int rbcard = rb1.getCardinality();
    Assert.assertEquals(100000, rbcard);
    Assert.assertEquals(0, rb.getCardinality());

    final BitSet bs = new BitSet();
    Assert.assertTrue(equals(bs, rb)); // still empty?
    for (int i = 100000; i < 200000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb1));
  }

  @Test
  public void flipTest2() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();

    rb.flip(100000L, 100000L);
    final int rbcard = rb.getCardinality();
    Assert.assertEquals(0, rbcard);

    final BitSet bs = new BitSet();
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest2A() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();

    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 100000L);
    rb.add(1); // will not affect rb1 (no shared container)
    final int rbcard = rb1.getCardinality();
    Assert.assertEquals(0, rbcard);
    Assert.assertEquals(1, rb.getCardinality());

    final BitSet bs = new BitSet();
    Assert.assertTrue(equals(bs, rb1));
    bs.set(1);
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest3() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();

    rb.flip(100000L, 200000L); // got 100k-199999
    rb.flip(100000L, 199991L); // give back 100k-199990
    final int rbcard = rb.getCardinality();

    Assert.assertEquals(9, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 199991; i < 200000; ++i) {
      bs.set(i);
    }

    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest3A() {
    System.out.println("FlipTest3A");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 200000L);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb1, 100000L, 199991L);
    final int rbcard = rb2.getCardinality();

    Assert.assertEquals(9, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 199991; i < 200000; ++i) {
      bs.set(i);
    }

    Assert.assertTrue(equals(bs, rb2));
  }

  @Test
  public void flipTest4() { // fits evenly on both ends
    System.out.println("FlipTest4");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.flip(100000L, 200000L); // got 100k-199999
    rb.flip(65536L, 4L * 65536);
    final int rbcard = rb.getCardinality();

    // 65536 to 99999 are 1s
    // 200000 to 262143 are 1s: total card

    Assert.assertEquals(96608, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 65536; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 200000; i < 262144; ++i) {
      bs.set(i);
    }

    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest4A() {
    System.out.println("FlipTest4A");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 200000L);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb1, 65536L, 4L * 65536);
    final int rbcard = rb2.getCardinality();

    Assert.assertEquals(96608, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 65536; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 200000; i < 262144; ++i) {
      bs.set(i);
    }

    Assert.assertTrue(equals(bs, rb2));
  }

  @Test
  public void flipTest5() { // fits evenly on small end, multiple
    // containers
    System.out.println("FlipTest5");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.flip(100000L, 132000L);
    rb.flip(65536L, 120000L);
    final int rbcard = rb.getCardinality();

    // 65536 to 99999 are 1s
    // 120000 to 131999

    Assert.assertEquals(46464, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 65536; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 120000; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest5A() {
    System.out.println("FlipTest5A");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 132000L);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb1, 65536L, 120000L);
    final int rbcard = rb2.getCardinality();

    Assert.assertEquals(46464, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 65536; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 120000; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb2));
  }

  @Test
  public void flipTest6() { // fits evenly on big end, multiple containers
    System.out.println("FlipTest6");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.flip(100000L, 132000L);
    rb.flip(99000L, 2 * 65536L);
    final int rbcard = rb.getCardinality();

    // 99000 to 99999 are 1000 1s
    // 131072 to 131999 are 928 1s

    Assert.assertEquals(1928, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 99000; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 2 * 65536; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest6A() {
    System.out.println("FlipTest6A");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 100000L, 132000L);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb1, 99000L, 2 * 65536L);
    final int rbcard = rb2.getCardinality();

    Assert.assertEquals(1928, rbcard);

    final BitSet bs = new BitSet();
    for (int i = 99000; i < 100000; ++i) {
      bs.set(i);
    }
    for (int i = 2 * 65536; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb2));
  }

  @Test
  public void flipTest7() { // within 1 word, first container
    System.out.println("FlipTest7");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.flip(650L, 132000L);
    rb.flip(648L, 651L);
    final int rbcard = rb.getCardinality();

    // 648, 649, 651-131999

    Assert.assertEquals(132000 - 651 + 2, rbcard);

    final BitSet bs = new BitSet();
    bs.set(648);
    bs.set(649);
    for (int i = 651; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb));
  }

  @Test
  public void flipTest7A() { // within 1 word, first container
    System.out.println("FlipTest7A");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb1 = MutableRoaringBitmap.flip(rb, 650L, 132000L);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb1, 648L, 651L);
    final int rbcard = rb2.getCardinality();

    // 648, 649, 651-131999

    Assert.assertEquals(132000 - 651 + 2, rbcard);

    final BitSet bs = new BitSet();
    bs.set(648);
    bs.set(649);
    for (int i = 651; i < 132000; ++i) {
      bs.set(i);
    }
    Assert.assertTrue(equals(bs, rb2));
  }

  @Test
  public void flipTestBigInt() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.add( Integer.MAX_VALUE + 100000);
    rb.add( Integer.MAX_VALUE + 100002);
    final MutableRoaringBitmap rb2 = MutableRoaringBitmap.flip(rb, Integer.MAX_VALUE+100001L , 
                                                     Integer.MAX_VALUE+200000L);
    Assert.assertEquals(99999, rb2.getCardinality());
    Assert.assertTrue(rb2.contains(Integer.MAX_VALUE+100000));
    Assert.assertFalse(rb2.contains(Integer.MAX_VALUE+100002));
    Assert.assertTrue(rb2.contains(Integer.MAX_VALUE+199999));
  }


  @Test
  public void flipTestBig() {
    final int numCases = 1000;
    System.out.println("flipTestBig for " + numCases + " tests");
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final BitSet bs = new BitSet();
    final Random r = new Random(3333);
    int checkTime = 2;

    for (int i = 0; i < numCases; ++i) {
      final long start = r.nextInt(65536 * 20);
      long end = r.nextInt(65536 * 20);
      if (r.nextDouble() < 0.1) {
        end = start + r.nextInt(100);
      }
      rb.flip(start, end);
      if (start < end)
       {
           bs.flip((int)start, (int) end); // throws exception
      }
      // otherwise
      // insert some more ANDs to keep things sparser
      if (r.nextDouble() < 0.2) {
        final MutableRoaringBitmap mask = new MutableRoaringBitmap();
        final BitSet mask1 = new BitSet();
        final long startM = r.nextInt(65536 * 20);
        final long endM = startM + 100000;
        mask.flip(startM, endM);
        mask1.flip((int)startM, (int)endM);
        mask.flip(0L, 65536L * 20 + 100000);
        mask1.flip(0, 65536 * 20 + 100000);
        rb.and(mask);
        bs.and(mask1);
      }
      // see if we can detect incorrectly shared containers
      if (r.nextDouble() < 0.1) {
        final MutableRoaringBitmap irrelevant = MutableRoaringBitmap.flip(rb, 10L, 100000L);
        irrelevant.flip(5L, 200000L);
        irrelevant.flip(190000L, 260000L);
      }
      if (i > checkTime) {
        Assert.assertTrue(equals(bs, rb));
        checkTime *= 1.5;
      }
    }
  }

  @Test
  public void flipTestBigA() {
    final int numCases = 1000;
    final BitSet bs = new BitSet();
    final Random r = new Random(3333);
    int checkTime = 2;
    MutableRoaringBitmap rb1 = new MutableRoaringBitmap(), rb2 = null; // alternate
    // between
    // them

    for (int i = 0; i < numCases; ++i) {
      final int start = r.nextInt(65536 * 20);
      int end = r.nextInt(65536 * 20);
      if (r.nextDouble() < 0.1) {
        end = start + r.nextInt(100);
      }

      if ((i & 1) == 0) {
        rb2 = MutableRoaringBitmap.flip(rb1, (long)start, (long)end);
        // tweak the other, catch bad sharing
        long r1 = r.nextInt(65536 * 20);
        long r2 = r.nextInt(65536 * 20);
        rb1.flip(r1, r2);
      } else {
        rb1 = MutableRoaringBitmap.flip(rb2, (long) start,(long) end);
        long r1 = r.nextInt(65536 * 20);
        long r2 = r.nextInt(65536 * 20);
        rb2.flip(r1, r2);
      }

      if (start < end)
       {
        bs.flip(start, end); // throws exception
      }
      // otherwise
      // insert some more ANDs to keep things sparser
      if (r.nextDouble() < 0.2 && (i & 1) == 0) {
        final MutableRoaringBitmap mask = new MutableRoaringBitmap();
        final BitSet mask1 = new BitSet();
        final int startM = r.nextInt(65536 * 20);
        final int endM = startM + 100000;
        mask.flip((long)startM, (long)endM);
        mask1.flip(startM, endM);
        mask.flip(0L, 65536L * 20 + 100000);
        mask1.flip(0, 65536 * 20 + 100000);
        rb2.and(mask);
        bs.and(mask1);
      }
      if (i > checkTime) {
        final MutableRoaringBitmap rb = (i & 1) == 0 ? rb2 : rb1;
        final boolean status = equals(bs, rb);
        Assert.assertTrue(status);
        checkTime *= 1.5;
      }
    }
  }

  @Test
  public void sparseOr() {
    final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
    rr1.add(1);
    rr1.add(1 << 31);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(1 << 31);
    MutableRoaringBitmap or = MutableRoaringBitmap.or(rr1, rr2);
    Assert.assertEquals(2, or.getCardinality());
    Assert.assertTrue(or.contains(1));
    Assert.assertTrue(or.contains(1 << 31));
    rr1.or(rr2);
    Assert.assertEquals(2, rr1.getCardinality());
    Assert.assertTrue(or.contains(1));
    Assert.assertTrue(or.contains(1 << 31));
  }

  @Test
  public void ortest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr2.add(k);
    }

    final MutableRoaringBitmap rror = MutableRoaringBitmap.or(rr, rr2);

    final int[] array = rror.toArray();
    final int[] arrayrr = rr.toArray();

    Assert.assertTrue(Arrays.equals(array, arrayrr));

    rr.or(rr2);
    final int[] arrayirr = rr.toArray();
    Assert.assertTrue(Arrays.equals(array, arrayirr));

  }

  @Test
  public void ORtest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65535; k < 4 * 65535 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65535; k < 8 * 65535 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65535; k < 9 * 65535 + 30000; ++k) {
      rr.add(k);
    }

    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
    }
    for (int k = 3 * 65536 + 2000; k < 3 * 65536 + 6000; ++k) {
      rr2.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 7 * 65535; k < 7 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65535; k < 10 * 65535 + 5000; ++k) {
      rr2.add(k);
    }
    final MutableRoaringBitmap correct = MutableRoaringBitmap.or(rr, rr2);
    rr.or(rr2);
    Assert.assertTrue(correct.equals(rr));
  }

  @Test
  public void ortest2() {
    final int[] arrayrr = new int[4000 + 4000 + 2];
    int pos = 0;
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
      arrayrr[pos++] = k;
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 8000; ++k) {
      rr2.add(k);
      arrayrr[pos++] = k;
    }

    arrayrr[pos++] = 100000;
    arrayrr[pos++] = 110000;

    final MutableRoaringBitmap rror = MutableRoaringBitmap.or(rr, rr2);

    final int[] arrayor = rror.toArray();

    Assert.assertTrue(Arrays.equals(arrayor, arrayrr));
  }

  @Test
  public void ortest3() {
    final HashSet<Integer> V1 = new HashSet<Integer>();
    final HashSet<Integer> V2 = new HashSet<Integer>();

    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    // For the first 65536: rr2 has a bitmap container, and rr has
    // an array container.
    // We will check the union between a BitmapCintainer and an
    // arrayContainer
    for (int k = 0; k < 4000; ++k) {
      rr2.add(k);
      V1.add(k);
    }
    for (int k = 3500; k < 4500; ++k) {
      rr.add(k);
      V1.add(k);
    }
    for (int k = 4000; k < 65000; ++k) {
      rr2.add(k);
      V1.add(k);
    }

    // In the second node of each roaring bitmap, we have two bitmap
    // containers.
    // So, we will check the union between two BitmapContainers
    for (int k = 65536; k < 65536 + 10000; ++k) {
      rr.add(k);
      V1.add(k);
    }

    for (int k = 65536; k < 65536 + 14000; ++k) {
      rr2.add(k);
      V1.add(k);
    }

    // In the 3rd node of each Roaring Bitmap, we have an
    // ArrayContainer, so, we will try the union between two
    // ArrayContainers.
    for (int k = 4 * 65535; k < 4 * 65535 + 1000; ++k) {
      rr.add(k);
      V1.add(k);
    }

    for (int k = 4 * 65535; k < 4 * 65535 + 800; ++k) {
      rr2.add(k);
      V1.add(k);
    }

    // For the rest, we will check if the union will take them in
    // the result
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr.add(k);
      V1.add(k);
    }

    for (int k = 7 * 65535; k < 7 * 65535 + 2000; ++k) {
      rr2.add(k);
      V1.add(k);
    }

    final MutableRoaringBitmap rror = MutableRoaringBitmap.or(rr, rr2);
    boolean valide = true;

    // Si tous les elements de rror sont dans V1 et que tous les
    // elements de
    // V1 sont dans rror(V2)
    // alors V1 == rror

    final Object[] tab = V1.toArray();
    final Vector<Integer> vector = new Vector<Integer>();
    for (Object aTab : tab) {
      vector.add((Integer) aTab);
    }

    for (final int i : rror.toArray()) {
      if (!vector.contains(i)) {
        valide = false;
      }
      V2.add(i);
    }
    for (int i = 0; i < V1.size(); i++) {
      if (!V2.contains(vector.elementAt(i))) {
        valide = false;
      }
    }

    Assert.assertEquals(valide, true);
  }

  // tests for how range falls on container boundaries

  @Test
  public void ortest4() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();

    for (int i = 0; i < 200000; i += 4) {
      rb2.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb2.add(i);
    }
    final int rb2card = rb2.getCardinality();

    // check or against an empty bitmap
    final MutableRoaringBitmap orresult = MutableRoaringBitmap.or(rb, rb2);
    final MutableRoaringBitmap off = MutableRoaringBitmap.or(rb2, rb);
    Assert.assertTrue(orresult.equals(off));

    Assert.assertEquals(rb2card, orresult.getCardinality());

    for (int i = 500000; i < 600000; i += 14) {
      rb.add(i);
    }
    for (int i = 200000; i < 400000; i += 3) {
      rb2.add(i);
    }
    // check or against an empty bitmap
    final MutableRoaringBitmap orresult2 = MutableRoaringBitmap.or(rb, rb2);
    Assert.assertEquals(rb2card, orresult.getCardinality());

    Assert.assertEquals(rb2.getCardinality() + rb.getCardinality(), orresult2.getCardinality());
    rb.or(rb2);
    Assert.assertTrue(rb.equals(orresult2));

  }

  @Test
  public void randomTest() {
    rTest(15);
    rTest(1024);
    rTest(4096);
    rTest(65536);
    rTest(65536 * 16);
  }


  public void rTest(final int N) {
    System.out.println("rtest N=" + N);
    for (int gap = 1; gap <= 65536; gap *= 2) {
      final BitSet bs1 = new BitSet();
      final MutableRoaringBitmap rb1 = new MutableRoaringBitmap();
      for (int x = 0; x <= N; x += gap) {
        bs1.set(x);
        rb1.add(x);
      }
      if (bs1.cardinality() != rb1.getCardinality()) {
        throw new RuntimeException("different card");
      }
      if (!equals(bs1, rb1)) {
        throw new RuntimeException("basic  bug");
      }
      for (int offset = 1; offset <= gap; offset *= 2) {
        final BitSet bs2 = new BitSet();
        final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();
        for (int x = 0; x <= N; x += gap) {
          bs2.set(x + offset);
          rb2.add(x + offset);
        }
        if (bs2.cardinality() != rb2.getCardinality()) {
          throw new RuntimeException("different card");
        }
        if (!equals(bs2, rb2)) {
          throw new RuntimeException("basic  bug");
        }

        BitSet clonebs1;
        // testing AND
        clonebs1 = (BitSet) bs1.clone();
        clonebs1.and(bs2);
        if (!equals(clonebs1, MutableRoaringBitmap.and(rb1, rb2))) {
          throw new RuntimeException("bug and");
        }
        {
          final MutableRoaringBitmap t = rb1.clone();
          t.and(rb2);
          if (!equals(clonebs1, t)) {
            throw new RuntimeException("bug inplace and");
          }
          if (!t.equals(MutableRoaringBitmap.and(rb1, rb2))) {
            System.out
                .println(t.highLowContainer.getContainerAtIndex(0).getClass().getCanonicalName());
            System.out.println(MutableRoaringBitmap.and(rb1, rb2).highLowContainer
                .getContainerAtIndex(0).getClass().getCanonicalName());

            throw new RuntimeException("bug inplace and");
          }
        }

        // testing OR
        clonebs1 = (BitSet) bs1.clone();
        clonebs1.or(bs2);

        if (!equals(clonebs1, MutableRoaringBitmap.or(rb1, rb2))) {
          throw new RuntimeException("bug or");
        }
        {
          final MutableRoaringBitmap t = rb1.clone();
          t.or(rb2);
          if (!equals(clonebs1, t)) {
            throw new RuntimeException("bug or");
          }
          if (!t.equals(MutableRoaringBitmap.or(rb1, rb2))) {
            throw new RuntimeException("bug or");
          }
          if (!t.toString().equals(MutableRoaringBitmap.or(rb1, rb2).toString())) {
            throw new RuntimeException("bug or");
          }

        }
        // testing XOR
        clonebs1 = (BitSet) bs1.clone();
        clonebs1.xor(bs2);
        if (!equals(clonebs1, MutableRoaringBitmap.xor(rb1, rb2))) {
          throw new RuntimeException("bug xor");
        }
        {
          final MutableRoaringBitmap t = rb1.clone();
          t.xor(rb2);
          if (!equals(clonebs1, t)) {
            throw new RuntimeException("bug xor");
          }

          if (!t.equals(MutableRoaringBitmap.xor(rb1, rb2))) {
            System.out.println(t);
            System.out.println(MutableRoaringBitmap.xor(rb1, rb2));
            System.out
                .println(Arrays.equals(t.toArray(), MutableRoaringBitmap.xor(rb1, rb2).toArray()));
            throw new RuntimeException("bug xor");
          }
        }
        // testing NOTAND
        clonebs1 = (BitSet) bs1.clone();
        clonebs1.andNot(bs2);
        if (!equals(clonebs1, MutableRoaringBitmap.andNot(rb1, rb2))) {
          throw new RuntimeException("bug andnot");
        }
        clonebs1 = (BitSet) bs2.clone();
        clonebs1.andNot(bs1);
        if (!equals(clonebs1, MutableRoaringBitmap.andNot(rb2, rb1))) {
          throw new RuntimeException("bug andnot");
        }
        {
          final MutableRoaringBitmap t = rb2.clone();
          t.andNot(rb1);
          if (!equals(clonebs1, t)) {
            throw new RuntimeException("bug inplace andnot");
          }
          final MutableRoaringBitmap g = MutableRoaringBitmap.andNot(rb2, rb1);
          if (!equals(clonebs1, g)) {
            throw new RuntimeException("bug andnot");
          }
          if (!t.equals(g)) {
            throw new RuntimeException("bug");
          }
        }
        clonebs1 = (BitSet) bs1.clone();
        clonebs1.andNot(bs2);
        if (!equals(clonebs1, MutableRoaringBitmap.andNot(rb1, rb2))) {
          throw new RuntimeException("bug andnot");
        }
        {
          final MutableRoaringBitmap t = rb1.clone();
          t.andNot(rb2);
          if (!equals(clonebs1, t)) {
            throw new RuntimeException("bug andnot");
          }
          final MutableRoaringBitmap g = MutableRoaringBitmap.andNot(rb1, rb2);
          if (!equals(clonebs1, g)) {
            throw new RuntimeException("bug andnot");
          }
          if (!t.equals(g)) {
            throw new RuntimeException("bug");
          }
        }
      }

    }
  }

  @Test
  public void simplecardinalityTest() {
    final int N = 512;
    final int gap = 70;

    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int k = 0; k < N; k++) {
      rb.add(k * gap);
      Assert.assertEquals(rb.getCardinality(), k + 1);
    }
    Assert.assertEquals(rb.getCardinality(), N);
    for (int k = 0; k < N; k++) {
      rb.add(k * gap);
      Assert.assertEquals(rb.getCardinality(), N);
    }

  }

  @Test
  public void simpleTest() throws IOException {
    final org.roaringbitmap.buffer.MutableRoaringBitmap rr =
        MutableRoaringBitmap.bitmapOf(1, 2, 3, 1000);
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    final DataOutputStream dos = new DataOutputStream(bos);
    rr.serialize(dos);
    dos.close();
    final ByteBuffer bb = ByteBuffer.wrap(bos.toByteArray());
    final ImmutableRoaringBitmap rrback = new ImmutableRoaringBitmap(bb);
    Assert.assertTrue(rr.equals(rrback));
  }

  @Test
  public void testSerialization() throws IOException, ClassNotFoundException {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 65000; k < 2 * 65000; ++k) {
      rr.add(k);
    }
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    // Note: you could use a file output steam instead of
    // ByteArrayOutputStream
    final ObjectOutputStream oo = new ObjectOutputStream(bos);
    rr.writeExternal(oo);
    oo.close();
    final MutableRoaringBitmap rrback = new MutableRoaringBitmap();
    final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    rrback.readExternal(new ObjectInputStream(bis));
    Assert.assertEquals(rr.getCardinality(), rrback.getCardinality());
    Assert.assertTrue(rr.equals(rrback));
  }


  @Test
  public void testSerializationBigInts() throws IOException, ClassNotFoundException {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 65000; k < 2 * 65000; ++k) {
        rr.add((1<<31)+k);
    }
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    // Note: you could use a file output steam instead of
    // ByteArrayOutputStream
    final ObjectOutputStream oo = new ObjectOutputStream(bos);
    rr.writeExternal(oo);
    oo.close();
    final MutableRoaringBitmap rrback = new MutableRoaringBitmap();
    final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    rrback.readExternal(new ObjectInputStream(bis));
    Assert.assertEquals(rr.getCardinality(), rrback.getCardinality());
    Assert.assertTrue(rr.equals(rrback));
  }

  @Test
  public void testSerialization2() throws IOException, ClassNotFoundException {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 200; k < 400; ++k) {
      rr.add(k);
    }
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    // Note: you could use a file output steam instead of
    // ByteArrayOutputStream
    final ObjectOutputStream oo = new ObjectOutputStream(bos);
    rr.writeExternal(oo);
    oo.close();
    final MutableRoaringBitmap rrback = new MutableRoaringBitmap();
    final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    rrback.readExternal(new ObjectInputStream(bis));
    Assert.assertEquals(rr.getCardinality(), rrback.getCardinality());
    Assert.assertTrue(rr.equals(rrback));
  }

  @Test
  public void testSerialization3() throws IOException, ClassNotFoundException {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 65000; k < 2 * 65000; ++k) {
      rr.add(k);
    }
    rr.add(1444000);
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    // Note: you could use a file output steam instead of
    // ByteArrayOutputStream
    int howmuch = rr.serializedSizeInBytes();
    final DataOutputStream oo = new DataOutputStream(bos);
    rr.serialize(oo);
    oo.close();
    Assert.assertEquals(howmuch, bos.toByteArray().length);
    final MutableRoaringBitmap rrback = new MutableRoaringBitmap();
    final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    rrback.deserialize(new DataInputStream(bis));
    Assert.assertEquals(rr.getCardinality(), rrback.getCardinality());
    Assert.assertTrue(rr.equals(rrback));
  }

  @Test
  public void testSerialization4() throws IOException, ClassNotFoundException {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 1; k <= 10000000; k += 10) {
      rr.add(k);
    }
    final ByteArrayOutputStream bos = new ByteArrayOutputStream();
    // Note: you could use a file output steam instead of
    // ByteArrayOutputStream
    int howmuch = rr.serializedSizeInBytes();
    final DataOutputStream oo = new DataOutputStream(bos);
    rr.serialize(oo);
    oo.close();
    Assert.assertEquals(howmuch, bos.toByteArray().length);
    final MutableRoaringBitmap rrback = new MutableRoaringBitmap();
    final ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
    rrback.deserialize(new DataInputStream(bis));
    Assert.assertEquals(rr.getCardinality(), rrback.getCardinality());
    Assert.assertTrue(rr.equals(rrback));
  }


  @Test
  public void sparseXor() {
    final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
    rr1.add(1);
    rr1.add(1 << 31);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(1 << 31);
    MutableRoaringBitmap xor = MutableRoaringBitmap.xor(rr1, rr2);
    Assert.assertEquals(1, xor.getCardinality());
    Assert.assertTrue(xor.contains(1));
    rr1.xor(rr2);
    Assert.assertEquals(1, rr1.getCardinality());
    Assert.assertTrue(xor.contains(1));
  }


  @Test
  public void XORtest() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65535; k < 4 * 65535 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65535; k < 8 * 65535 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65535; k < 9 * 65535 + 30000; ++k) {
      rr.add(k);
    }

    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
    }
    for (int k = 3 * 65536 + 2000; k < 3 * 65536 + 6000; ++k) {
      rr2.add(k);
    }
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 7 * 65535; k < 7 * 65535 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65535; k < 10 * 65535 + 5000; ++k) {
      rr2.add(k);
    }
    final MutableRoaringBitmap correct = MutableRoaringBitmap.xor(rr, rr2);
    rr.xor(rr2);
    Assert.assertTrue(correct.equals(rr));
  }

  @Test
  public void testIterator() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rb.add(k);
    }
    for (int k = 0; k < 1000; ++k) {
      rb.add(k * 100);
    }
    MutableRoaringBitmap copy1 = new MutableRoaringBitmap();
    for (int x : rb) {
      copy1.add(x);
    }
    Assert.assertTrue(copy1.equals(rb));
    MutableRoaringBitmap copy2 = new MutableRoaringBitmap();
    IntIterator i = rb.getIntIterator();
    Iterator<Integer> is = rb.iterator();
    while (i.hasNext()) {
      if (!is.hasNext()) {
        throw new RuntimeException("bug");
      }
      int x = i.next();
      copy2.add(x);
      int xs = is.next();
      if (x != xs) {
        throw new RuntimeException("values differ " + x + " " + xs);
      }
    }
    if (is.hasNext()) {
      throw new RuntimeException("bug: more data available");
    }
    Assert.assertTrue(copy2.equals(rb));
  }


  @Test
  public void testIteratorBigInts() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rb.add((1<<31)+k);
    }
    for (int k = 0; k < 1000; ++k) {
      rb.add((1<<31)+k * 100);
    }
    MutableRoaringBitmap copy1 = new MutableRoaringBitmap();
    for (int x : rb) {
      copy1.add(x);
    }
    Assert.assertTrue(copy1.equals(rb));
    MutableRoaringBitmap copy2 = new MutableRoaringBitmap();
    IntIterator i = rb.getIntIterator();
    Iterator<Integer> is = rb.iterator();
    while (i.hasNext()) {
      if (!is.hasNext()) {
        throw new RuntimeException("bug");
      }
      int x = i.next();
      copy2.add(x);
      int xs = is.next();
      if (x != xs) {
        throw new RuntimeException("values differ " + x + " " + xs);
      }
    }
    if (is.hasNext()) {
      throw new RuntimeException("bug: more data available");
    }
    Assert.assertTrue(copy2.equals(rb));
  }




  
  @Test
  public void testIteratorMapped() {
    MutableRoaringBitmap orb = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      orb.add(k);
    }
    for (int k = 0; k < 1000; ++k) {
      orb.add(k * 100);
    }
    MutableRoaringBitmap ocopy1 = new MutableRoaringBitmap();
    for (int x : orb) {
      ocopy1.add(x);
    }
    Assert.assertTrue(ocopy1.equals(orb));
    MutableRoaringBitmap copy2 = new MutableRoaringBitmap();
    IntIterator i = toMapped(orb).getIntIterator();
    Iterator<Integer> is = toMapped(orb).iterator();
    while (i.hasNext()) {
      if (!is.hasNext()) {
        throw new RuntimeException("bug");
      }
      int x = i.next();
      copy2.add(x);
      int xs = is.next();
      if (x != xs) {
        throw new RuntimeException("values differ " + x + " " + xs);
      }
    }
    if (is.hasNext()) {
      throw new RuntimeException("bug: more data available");
    }
    Assert.assertTrue(copy2.equals(toMapped(orb)));
  }
 

 @Test
  public void testIteratorMappedBigInts() {
    MutableRoaringBitmap orb = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
        orb.add((1<<32)+k);
    }
    for (int k = 0; k < 1000; ++k) {
      orb.add((1<<32)+k * 100);
    }
    MutableRoaringBitmap ocopy1 = new MutableRoaringBitmap();
    for (int x : orb) {
      ocopy1.add(x);
    }
    Assert.assertTrue(ocopy1.equals(orb));
    MutableRoaringBitmap copy2 = new MutableRoaringBitmap();
    IntIterator i = toMapped(orb).getIntIterator();
    Iterator<Integer> is = toMapped(orb).iterator();
    while (i.hasNext()) {
      if (!is.hasNext()) {
        throw new RuntimeException("bug");
      }
      int x = i.next();
      copy2.add(x);
      int xs = is.next();
      if (x != xs) {
        throw new RuntimeException("values differ " + x + " " + xs);
      }
    }
    if (is.hasNext()) {
      throw new RuntimeException("bug: more data available");
    }
    Assert.assertTrue(copy2.equals(toMapped(orb)));
  }
 


 @Test
  public void xortest1() {
    final HashSet<Integer> V1 = new HashSet<Integer>();
    final HashSet<Integer> V2 = new HashSet<Integer>();

    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    // For the first 65536: rr2 has a bitmap container, and rr has
    // an array container.
    // We will check the union between a BitmapCintainer and an
    // arrayContainer
    for (int k = 0; k < 4000; ++k) {
      rr2.add(k);
      if (k < 3500) {
        V1.add(k);
      }
    }
    for (int k = 3500; k < 4500; ++k) {
      rr.add(k);
    }
    for (int k = 4000; k < 65000; ++k) {
      rr2.add(k);
      if (k >= 4500) {
        V1.add(k);
      }
    }

    // In the second node of each roaring bitmap, we have two bitmap
    // containers.
    // So, we will check the union between two BitmapContainers
    for (int k = 65536; k < 65536 + 30000; ++k) {
      rr.add(k);
    }

    for (int k = 65536; k < 65536 + 50000; ++k) {
      rr2.add(k);
      if (k >= 65536 + 30000) {
        V1.add(k);
      }
    }

    // In the 3rd node of each Roaring Bitmap, we have an
    // ArrayContainer. So, we will try the union between two
    // ArrayContainers.
    for (int k = 4 * 65535; k < 4 * 65535 + 1000; ++k) {
      rr.add(k);
      if (k >= 4 * 65535 + 800) {
        V1.add(k);
      }
    }

    for (int k = 4 * 65535; k < 4 * 65535 + 800; ++k) {
      rr2.add(k);
    }

    // For the rest, we will check if the union will take them in
    // the result
    for (int k = 6 * 65535; k < 6 * 65535 + 1000; ++k) {
      rr.add(k);
      V1.add(k);
    }

    for (int k = 7 * 65535; k < 7 * 65535 + 2000; ++k) {
      rr2.add(k);
      V1.add(k);
    }

    final MutableRoaringBitmap rrxor = MutableRoaringBitmap.xor(rr, rr2);
    boolean valide = true;

    final Object[] tab = V1.toArray();
    final Vector<Integer> vector = new Vector<Integer>();
    for (Object aTab : tab) {
      vector.add((Integer) aTab);
    }

    for (final int i : rrxor.toArray()) {
      if (!vector.contains(i)) {
        valide = false;
      }
      V2.add(i);
    }
    for (int i = 0; i < V1.size(); i++) {
      if (!V2.contains(vector.elementAt(i))) {
        valide = false;
      }
    }

    Assert.assertEquals(valide, true);
  }

  @Test
  public void xortest4() {
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    final MutableRoaringBitmap rb2 = new MutableRoaringBitmap();

    for (int i = 0; i < 200000; i += 4) {
      rb2.add(i);
    }
    for (int i = 200000; i < 400000; i += 14) {
      rb2.add(i);
    }
    final int rb2card = rb2.getCardinality();

    // check or against an empty bitmap
    final MutableRoaringBitmap xorresult = MutableRoaringBitmap.xor(rb, rb2);
    final MutableRoaringBitmap off = MutableRoaringBitmap.or(rb2, rb);
    Assert.assertTrue(xorresult.equals(off));

    Assert.assertEquals(rb2card, xorresult.getCardinality());

    for (int i = 500000; i < 600000; i += 14) {
      rb.add(i);
    }
    for (int i = 200000; i < 400000; i += 3) {
      rb2.add(i);
    }
    // check or against an empty bitmap
    final MutableRoaringBitmap xorresult2 = MutableRoaringBitmap.xor(rb, rb2);
    Assert.assertEquals(rb2card, xorresult.getCardinality());

    Assert.assertEquals(rb2.getCardinality() + rb.getCardinality(), xorresult2.getCardinality());
    rb.xor(rb2);
    Assert.assertTrue(xorresult2.equals(rb));

  }

  boolean validate(MappeableBitmapContainer bc, MappeableArrayContainer ac) {
    // Checking the cardinalities of each container

    if (bc.getCardinality() != ac.getCardinality()) {
      System.out.println("cardinality differs");
      return false;
    }
    // Checking that the two containers contain the same values
    int counter = 0;

    int i = bc.nextSetBit(0);
    while (i >= 0) {
      ++counter;
      if (!ac.contains((short) i)) {
        System.out.println("content differs");
        System.out.println(bc);
        System.out.println(ac);
        return false;
      }
      i = bc.nextSetBit(i + 1);
    }

    // checking the cardinality of the BitmapContainer
    return counter == bc.getCardinality();
  }

  public static boolean equals(BitSet bs, MutableRoaringBitmap rr) {
    final int[] a = new int[bs.cardinality()];
    int pos = 0;
    for (int x = bs.nextSetBit(0); x >= 0; x = bs.nextSetBit(x + 1)) {
      a[pos++] = x;
    }
    return Arrays.equals(rr.toArray(), a);
  }



  /**
   * Test massive and.
   */
  @Test
  public void testMassiveAnd() {
    System.out.println("testing massive logical and");
    MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[1024];
    for (int k = 0; k < ewah.length; ++k) {
      ewah[k] = new MutableRoaringBitmap();
    }
    int howmany = 1000000;
    for (int k = 0; k < howmany; ++k) {
      ewah[Math.abs(k + 2 * k * k) % ewah.length].add(k);
    }
    for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip(13L, (long) howmany / 2);
    }
    for (int N = 2; N < ewah.length; ++N) {
      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < N; ++k) {
        answer = MutableRoaringBitmap.and(answer, ewah[k]);
      }

      MutableRoaringBitmap answer2 = BufferFastAggregation.and(Arrays.copyOf(ewah, N));
      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.getCardinality() == answer2.getCardinality());
      @SuppressWarnings({"unchecked", "rawtypes"})
      Iterator<ImmutableRoaringBitmap> z = (Iterator) toIterator(Arrays.copyOf(ewah, N));
      MutableRoaringBitmap answer2b = BufferFastAggregation.and(z);
      Assert.assertTrue(answer.equals(answer2b));
      Assert.assertTrue(answer.getCardinality() == answer2b.getCardinality());

    }
  }



 @Test
  public void testMassiveAndBigInts() {
    System.out.println("testing massive logical and - big values");
    MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[1024];
    for (int k = 0; k < ewah.length; ++k) {
      ewah[k] = new MutableRoaringBitmap();
    }
    int howmany = 1000000;
    for (int k = 0; k < howmany; ++k) {
        ewah[Math.abs(k + 2 * k * k) % ewah.length].add((1<<31)+k);
    }
    for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip( (1L<<31)+13L,  (1L<<31)+(long) howmany / 2);
    }
    for (int N = 2; N < ewah.length; ++N) {
      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < N; ++k) {
        answer = MutableRoaringBitmap.and(answer, ewah[k]);
      }

      MutableRoaringBitmap answer2 = BufferFastAggregation.and(Arrays.copyOf(ewah, N));
      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.getCardinality() == answer2.getCardinality());
      @SuppressWarnings({"unchecked", "rawtypes"})
      Iterator<ImmutableRoaringBitmap> z = (Iterator) toIterator(Arrays.copyOf(ewah, N));
      MutableRoaringBitmap answer2b = BufferFastAggregation.and(z);
      Assert.assertTrue(answer.equals(answer2b));
      Assert.assertTrue(answer.getCardinality() == answer2b.getCardinality());

    }
  }


  private static <T> Iterator<T> toIterator(final T[] x) {
    return new Iterator<T>() {
      int pos = 0;

      @Override
      public boolean hasNext() {
        return pos < x.length;
      }

      @Override
      public void remove() {}


      @Override
      public T next() {
        return x[pos++];
      }
    };
  }


  /**
   * Test massive or.
   */
  @Test
  public void testMassiveOr() {
    System.out.println("testing massive logical or (can take a couple of minutes)");
    final int N = 128;
    for (int howmany = 512; howmany <= 1000000; howmany *= 2) {
      MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[N];
      for (int k = 0; k < ewah.length; ++k) {
        ewah[k] = new MutableRoaringBitmap();
      }
      for (int k = 0; k < howmany; ++k) {
        ewah[Math.abs(k + 2 * k * k) % ewah.length].add(k);
      }
      for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip(13L, (long) howmany / 2);
      }
      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < ewah.length; ++k) {
        answer = MutableRoaringBitmap.or(answer, ewah[k]);
      }
      MutableRoaringBitmap answer2 = BufferFastAggregation.or(ewah);
      MutableRoaringBitmap answer3 = BufferFastAggregation.horizontal_or(ewah);
      @SuppressWarnings({"rawtypes"})
      MutableRoaringBitmap answer3b = BufferFastAggregation.or(toIterator(ewah));

      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.equals(answer3));
      Assert.assertTrue(answer.equals(answer3b));
      Assert.assertTrue(answer.getCardinality() == answer3.getCardinality());
      Assert.assertTrue(answer.equals(answer3b));
      Assert.assertTrue(answer.getCardinality() == answer3b.getCardinality());
    }
  }

@Test
  public void testMassiveOrBigInts() {
    System.out.println("testing massive logical or/big ints (can take a couple of minutes)");
    final int N = 128;
    for (int howmany = 512; howmany <= 1000000; howmany *= 2) {
      MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[N];
      for (int k = 0; k < ewah.length; ++k) {
        ewah[k] = new MutableRoaringBitmap();
      }
      for (int k = 0; k < howmany; ++k) {
        ewah[Math.abs(k + 2 * k * k) % ewah.length].add( (1<<31)+k);
      }
      for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip( (1L<<31)+13L,  (1L<<31)+(long) howmany / 2);
      }
      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < ewah.length; ++k) {
        answer = MutableRoaringBitmap.or(answer, ewah[k]);
      }
      MutableRoaringBitmap answer2 = BufferFastAggregation.or(ewah);
      MutableRoaringBitmap answer3 = BufferFastAggregation.horizontal_or(ewah);
      @SuppressWarnings({"rawtypes"})
      MutableRoaringBitmap answer3b = BufferFastAggregation.or(toIterator(ewah));

      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.equals(answer3));
      Assert.assertTrue(answer.equals(answer3b));
      Assert.assertTrue(answer.getCardinality() == answer3.getCardinality());
      Assert.assertTrue(answer.equals(answer3b));
      Assert.assertTrue(answer.getCardinality() == answer3b.getCardinality());
    }
  }


  /**
   * Test massive xor.
   */
  @Test
  public void testMassiveXOr() {
    System.out.println("testing massive logical xor (can take a couple of minutes)");
    final int N = 128;
    for (int howmany = 512; howmany <= 1000000; howmany *= 2) {
      MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[N];
      for (int k = 0; k < ewah.length; ++k) {
        ewah[k] = new MutableRoaringBitmap();
      }
      for (int k = 0; k < howmany; ++k) {
        ewah[Math.abs(k + 2 * k * k) % ewah.length].add(k);
      }
      for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip(13L, (long)howmany / 2);
      }

      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < ewah.length; ++k) {
        answer = MutableRoaringBitmap.xor(answer, ewah[k]);
      }
      MutableRoaringBitmap answer2 = BufferFastAggregation.xor(ewah);
      MutableRoaringBitmap answer3 = BufferFastAggregation.horizontal_xor(ewah);
      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.equals(answer3));
    }
  }

  @Test
  public void testMassiveXOrBigInts() {
    System.out.println("testing massive logical xor (can take a couple of minutes)");
    final int N = 128;
    for (int howmany = 512; howmany <= 1000000; howmany *= 2) {
      MutableRoaringBitmap[] ewah = new MutableRoaringBitmap[N];
      for (int k = 0; k < ewah.length; ++k) {
        ewah[k] = new MutableRoaringBitmap();
      }
      for (int k = 0; k < howmany; ++k) {
          ewah[Math.abs(k + 2 * k * k) % ewah.length].add((1<<31)+k);
      }
      for (int k = 3; k < ewah.length; k += 3) {
        ewah[k].flip((1L<<31)+13L, (1L<<31)+(long)howmany / 2);
      }

      MutableRoaringBitmap answer = ewah[0];
      for (int k = 1; k < ewah.length; ++k) {
        answer = MutableRoaringBitmap.xor(answer, ewah[k]);
      }
      MutableRoaringBitmap answer2 = BufferFastAggregation.xor(ewah);
      MutableRoaringBitmap answer3 = BufferFastAggregation.horizontal_xor(ewah);
      Assert.assertTrue(answer.equals(answer2));
      Assert.assertTrue(answer.equals(answer3));
    }
  }



  @Test
  public void testRandomLists() {
    MutableRoaringBitmap rb1 =
        MutableRoaringBitmap.bitmapOf(org.roaringbitmap.TestRoaringBitmap.randomlists[0]);
    MutableRoaringBitmap rb2 =
        MutableRoaringBitmap.bitmapOf(org.roaringbitmap.TestRoaringBitmap.randomlists[1]);
    MutableRoaringBitmap rbor = MutableRoaringBitmap.or(rb1, rb2);
    Assert.assertTrue(rbor.equals(BufferFastAggregation.horizontal_or(rb1, rb2)));
  }



  @Test
  public void intersecttest() {
    final MutableRoaringBitmap rr1 = new MutableRoaringBitmap();
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 0; k < 40000; ++k) {
      rr1.add(2 * k);
      rr2.add(2 * k + 1);
    }
    Assert.assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), false);
    rr1.add(2 * 500 + 1);
    Assert.assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true);
    final MutableRoaringBitmap rr3 = new MutableRoaringBitmap();
    rr3.add(2 * 501 + 1);
    Assert.assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr2), true);
    Assert.assertEquals(ImmutableRoaringBitmap.intersects(rr3, rr1), false);
    for (int k = 0; k < 40000; ++k) {
      rr1.add(2 * k + 1);
    }
    rr1.runOptimize();
    Assert.assertEquals(ImmutableRoaringBitmap.intersects(rr1, rr2), true);
  }

  // From a bug report contributed by Kevin Karpenske
  // this had created an array out of bounds error
  @Test
  public void fliptest_Karpenske() {
    long[] array = new long[] {343798, 343799, 343800, 343801, 343803, 343804, 343805, 343807, 343809,
        343811, 343812, 343815, 343816, 343817, 343818, 343819, 343821, 343825, 343827, 343828,
        343830, 343831, 343832, 343833, 343835, 343836, 343837, 343838, 343839, 343840, 343841,
        343842, 343843, 343844, 343845, 343847, 343848, 343849, 343850, 343851, 343853, 343854,
        343855, 343856, 343858, 343859, 343860, 343861, 343862, 343863, 343864, 343865, 343866,
        343868, 343869, 343874, 343875, 343877, 343879, 343880, 343881, 343882, 343883, 343887,
        343889, 343890, 343891, 343894, 343895, 343898, 343899, 343900, 343901, 343902, 343904,
        343906, 343907, 343908, 343909, 343910, 343911, 343912, 343913, 343914, 343915, 343916,
        343917, 343918, 343919, 343921, 343922, 343923, 343924, 343927, 343928, 343929, 343930,
        343931, 343932, 343933, 343934, 343935, 343938, 343939, 343941, 343942, 343943, 343944,
        343945, 343946, 343949, 343951, 343953, 343954, 343955, 343956, 343958, 343959, 343961,
        343962, 343964, 343965, 343966, 343967, 343968, 343969, 343971, 343972, 343973, 343974,
        343976, 343978, 343979, 343981, 343982, 343983, 343985, 343987, 343988, 343989, 343992,
        343993, 343994, 343995, 343996, 343997, 343998, 344000, 344001, 344002, 344003, 344004,
        344006, 344008, 344009, 344011, 344012, 344013, 344015, 344017, 344019, 344020, 344021,
        344023, 344025, 344026, 344027, 344028, 344029, 344030, 344031, 344034, 344035, 344036,
        344037, 344038, 344039, 344040, 344042, 344043, 344046, 344047};
    MutableRoaringBitmap bitmap = new MutableRoaringBitmap();
    long[] indexes = array;
    int rangeStart = 0;
    for (int rangeEnd = 1; rangeEnd < indexes.length; rangeEnd++) {
      if (indexes[rangeEnd - 1] + 1 != indexes[rangeEnd]) {
        if (rangeStart == rangeEnd - 1) {
            bitmap.add((int)indexes[rangeStart]);
        } else {
          bitmap.flip(indexes[rangeStart], indexes[rangeEnd - 1] + 1);
        }
        rangeStart = rangeEnd;
      }
    }
    if (rangeStart == indexes.length - 1) {
        bitmap.add((int)indexes[rangeStart]);
    } else {
      bitmap.flip(indexes[rangeStart], indexes[indexes.length - 1] + 1);
    }
    assertEquals(182, bitmap.getCardinality());
  }

  @Test
  public void andCounttest3() {
    // This is based on andtest3
    final int[] arrayand = new int[11256];
    int pos = 0;
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr.add(k);
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536; k < 3 * 65536 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536 + 1000; k < 3 * 65536 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 3 * 65536 + 7000; k < 3 * 65536 + 9000; ++k) {
      rr.add(k);
    }
    for (int k = 4 * 65536; k < 4 * 65536 + 7000; ++k) {
      rr.add(k);
    }
    for (int k = 6 * 65536; k < 6 * 65536 + 10000; ++k) {
      rr.add(k);
    }
    for (int k = 8 * 65536; k < 8 * 65536 + 1000; ++k) {
      rr.add(k);
    }
    for (int k = 9 * 65536; k < 9 * 65536 + 30000; ++k) {
      rr.add(k);
    }
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 4000; k < 4256; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 65536; k < 65536 + 4000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 3 * 65536 + 1000; k < 3 * 65536 + 7000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 6 * 65536; k < 6 * 65536 + 1000; ++k) {
      rr2.add(k);
      arrayand[pos++] = k;
    }
    for (int k = 7 * 65536; k < 7 * 65536 + 1000; ++k) {
      rr2.add(k);
    }
    for (int k = 10 * 65536; k < 10 * 65536 + 5000; ++k) {
      rr2.add(k);
    }

    final ImmutableRoaringBitmap rrand = ImmutableRoaringBitmap.and(rr, rr2);
    final int rrandCount = ImmutableRoaringBitmap.andCardinality(rr, rr2);

    Assert.assertEquals(rrand.getCardinality(), rrandCount);
    final int rrandCountm = ImmutableRoaringBitmap.andCardinality(toMapped(rr), toMapped(rr2));
    Assert.assertEquals(rrand.getCardinality(), rrandCountm);

  }

  @Test
  public void andcounttest() {
    // This is based on andtest
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    rr2.add(13);
    final MutableRoaringBitmap rrand = ImmutableRoaringBitmap.and(rr, rr2);
    ImmutableRoaringBitmap rrm = toMapped(rr);
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr, rr2));
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr));
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rrm, rr2));
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm));

    rr.and(rr2);
    rrm = toMapped(rr);
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rr));
    assertEquals(rrand.getCardinality(), ImmutableRoaringBitmap.andCardinality(rr2, rrm));
  }

  @Test
  public void orcount() {
    final MutableRoaringBitmap rr = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr.add(k);
    }
    rr.add(100000);
    rr.add(110000);
    final MutableRoaringBitmap rr2 = new MutableRoaringBitmap();
    for (int k = 0; k < 4000; ++k) {
      rr2.add(k);
    }

    final MutableRoaringBitmap rror = ImmutableRoaringBitmap.or(rr, rr2);
    Assert.assertEquals(rror.getCardinality(), ImmutableRoaringBitmap.orCardinality(rr, rr2));

  }

  @Test
  public void testLazyOr() {
    MutableRoaringBitmap rb1 = new MutableRoaringBitmap();
    rb1.add(1<<16);
    rb1.add(1<<18);
    rb1.add(1<<19);
    MutableRoaringBitmap rb2 = new MutableRoaringBitmap();
    rb2.add(4);
    rb2.add(7);
    rb2.add(8);
    rb2.add(9);
    MutableRoaringBitmap rb3 = new MutableRoaringBitmap();
    rb3.add(1);
    rb3.add(2);
    rb3.add(3);
    rb3.add(4);
    rb3.add(5);
    rb3.add(1<<16);
    rb3.add(1<<17);
    rb3.add(1<<20);
    rb1.lazyor(rb2);
    rb1.lazyor(rb3);
    MutableRoaringBitmap rb4 = new MutableRoaringBitmap();
    rb4.add(1);
    rb4.add(2);
    rb4.add(3);
    rb4.add(4);
    rb4.add(5);
    rb4.add(7);
    rb4.add(8);
    rb4.add(9);
    rb4.add(1<<16);
    rb4.add(1<<17);
    rb4.add(1<<18);
    rb4.add(1<<19);
    rb4.add(1<<20);
    Assert.assertEquals(rb4, rb1);
  }

  @Test
  public void testFirstLast_CreateSparseContainersAfterRun() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.add(1L, 1 << 14);
    for(int i = 18; i < 31; ++i) {
      int x = 1 << i;
      rb.add(x);
      Assert.assertEquals(1, rb.first());
      Assert.assertEquals(x, rb.last());
    }
  }

  @Test(expected = NoSuchElementException.class)
  public void testEmptyFirst() {
    new MutableRoaringBitmap().first();
  }

  @Test(expected = NoSuchElementException.class)
  public void testEmptyLast() {
    new MutableRoaringBitmap().last();
  }

  @Test
  public void testFirstLast() {
    MutableRoaringBitmap rb = new MutableRoaringBitmap();

    rb.add(2);
    rb.add(4);
    rb.add(8);
    Assert.assertEquals(2, rb.first());
    Assert.assertEquals(8, rb.last());

    rb.add(1L << 5, 1L << 14);
    Assert.assertEquals(2, rb.first());
    Assert.assertEquals((1 << 14) - 1, rb.last());

    rb.add(1L<< 15, 1L << 30);
    Assert.assertEquals(2, rb.first());
    Assert.assertEquals((1L << 30) - 1, rb.last());
  }

  @Test
  public void testAndCardinality() {
    MutableRoaringBitmap baseline = new MutableRoaringBitmap();
    baseline.add((1L << 16) + 1, 1L << 18);
    baseline.add((1L << 19) + 1, 1L << 20);
    baseline.add((1 << 21) + 1);
    baseline.add((1 << 21) + 3);
    baseline.add((1 << 21) + 5);
    assertEquals(baseline, MutableRoaringBitmap.and(baseline, baseline));
    assertEquals(baseline.getCardinality(), MutableRoaringBitmap.andCardinality(baseline, baseline));
  }

  @Test
  public void addoffset() { 
    final MutableRoaringBitmap rb = new MutableRoaringBitmap();
    rb.add(10);
    rb.add(0xFFFF);
    rb.add(0x010101);
    for (int i = 100000; i < 200000; i += 4) {
        rb.add(i);
    }
    rb.add(400000L, 1400000L);
    for(int offset = 3; offset < 1000000; offset *= 3) {
      MutableRoaringBitmap rboff = MutableRoaringBitmap.addOffset(rb, offset);
      IntIterator i = rb.getIntIterator();
      IntIterator j = rboff.getIntIterator();
      while(i.hasNext() && j.hasNext()) {
        assertTrue(i.next() + offset ==  j.next());  
      }
      assertTrue(i.hasNext() ==  j.hasNext());
    }
    for(int offset = 1024; offset < 1000000; offset *= 2) {
      MutableRoaringBitmap rboff = MutableRoaringBitmap.addOffset(rb, offset);
      IntIterator i = rb.getIntIterator();
      IntIterator j = rboff.getIntIterator();
      while(i.hasNext() && j.hasNext()) {
      assertTrue(i.next() + offset ==  j.next());  
      }
      assertTrue(i.hasNext() ==  j.hasNext());
    }
  }
}
